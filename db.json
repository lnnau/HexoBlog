{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/img/BlogAboutImg.jpg","path":"img/BlogAboutImg.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/WeChat.png","path":"img/WeChat.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Java常见异常.md","hash":"6b3a2bf527161c0a8f7d01347a948c76df8292aa","modified":1660640550452},{"_id":"source/_posts/Linux基础篇.md","hash":"e0958b184409a64a631b2cff7bcacb7d3aae5f36","modified":1653663442326},{"_id":"source/_posts/Java集合的回顾（集合的排序）.md","hash":"d075268a9985d8adc2653fcbd2689ddf9c720ec7","modified":1647764157207},{"_id":"source/_posts/Python爬取某东商品数据.md","hash":"6532dd5bef2901170b8b2aade62063bc82924fad","modified":1669957451245},{"_id":"source/_posts/springboot入门搭建.md","hash":"4d9b1a6c616d1c09d106deb0b29f7b32af87a6a4","modified":1656405847157},{"_id":"source/about/index.md","hash":"dadfa0722a6c719ccb17cfe2bc9ed9ab57553dff","modified":1663253911156},{"_id":"source/_posts/test.md","hash":"96bb2dc1ada86472dee3f98932a9763b4c1ac15f","modified":1665221470739},{"_id":"source/_posts/百度翻译api接口调用.md","hash":"2ca1ee650aaea307f8e0c55e13743306a35b4f1a","modified":1665221665238},{"_id":"source/_posts/Python爬取某东商品数据/2022-12-02-12-51-15-image.png","hash":"8ba393bd48849acf70b93c334d4f845e10bb3f8b","modified":1669956675526},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-15-57-38-image.png","hash":"1bc8b024735e63ecbeea5e5da90ec9d97325f1e8","modified":1661587058791},{"_id":"source/_posts/assets/Python爬取某东商品数据/6533eb3b2a4b34ca96afd6f03f4d97c0dafbd2cc.png","hash":"8ba393bd48849acf70b93c334d4f845e10bb3f8b","modified":1669956675526},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-16-30-47-image.png","hash":"6b64cc51df8b31a82108638607fd7ea4561649a3","modified":1661589047310},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-16-11-42-image.png","hash":"910e45c80d8bedf2288aafa03d23286794ca3668","modified":1661587902234},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-16-21-40-image.png","hash":"1751194ff9ac5d649bd31eba6ad2162a5c518716","modified":1661588500270},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-16-10-04-image.png","hash":"eb6c4c2fd079b56713cdb6137067064f91ed5807","modified":1661587804747},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-16-29-20-image.png","hash":"2a8525fba646eb5a5be859bcd587e94def992aa9","modified":1661588960406},{"_id":"source/_posts/assets/assets百度翻译api接口调用/2022-08-27-16-15-56-image.png","hash":"37eff616d09b9244c7d944734a45e3713914c6c0","modified":1661588156065},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1663049159000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1663049159000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1663049159000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1663049159000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1663049159000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1663049159000},{"_id":"themes/fluid/_config.yml","hash":"39baa882da9b0af5178c7767306be14bcf992a55","modified":1663049159000},{"_id":"themes/fluid/README_en.md","hash":"8c874f309e346fffa392e174385b5cc08510f218","modified":1663049159000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1663049159000},{"_id":"themes/fluid/README.md","hash":"6d752df6f2278033dc2512a7d5be22c8a8eb665a","modified":1663049159000},{"_id":"themes/fluid/package.json","hash":"167c6a0729a9286a7f508c1dd6a9c689e8799008","modified":1663049159000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1663049159000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1663049159000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1663049159000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1663049159000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1663049159000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1663049159000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1663049159000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1663049159000},{"_id":"themes/fluid/layout/404.ejs","hash":"9569c5c8f67d2783f372f671c57b93a00dc63c2f","modified":1663049159000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1663049159000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1663049159000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1663049159000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1663049159000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1663049159000},{"_id":"themes/fluid/layout/index.ejs","hash":"db000a6a0cec19d32a6e7e94cd4c478500d9c5ac","modified":1663049159000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1663049159000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1663049159000},{"_id":"themes/fluid/layout/post.ejs","hash":"505bcc06e55066b7cc5551d9ac0694e7713bfab5","modified":1663049159000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1663049159000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1663049159000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1663049159000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"24ef242aa01e5f5bc397cf3f83ae48b1e8353dab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1663049159000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"d516b9db63067f9ea9c72cc75ae4ff358417e77d","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1663049159000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1663049159000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"47e6dba7652a621a54067413490a11c8a89e3d7b","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1663049159000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1663049159000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1663049159000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1663049159000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1663049159000},{"_id":"themes/fluid/source/img/BlogAboutImg.jpg","hash":"de515968e5f83ddc3698b4c2e3b536b4b367532e","modified":1663489679093},{"_id":"themes/fluid/source/img/WeChat.png","hash":"ce60d42f6f62ea5b811a58718f19f2c88cee4f27","modified":1663408141131},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1663049159000},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1663049159000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1663049159000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1663049159000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1663049159000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1663049159000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1663049159000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1663049159000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1663049159000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1663049159000},{"_id":"themes/fluid/source/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1663049159000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1663049159000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1663049159000},{"_id":"themes/fluid/source/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1663049159000},{"_id":"themes/fluid/source/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"38990ed9dbccd88342ee4b4cb5e60818e9eb8e8a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"e6820fb7f13662c42f8433ec95404238f4c1860c","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"1327395a4dde1ea06c476b047fb110bcd269149f","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"e3713fa78e0fc14a239360b020068d8513573ae4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"9d13392cea94b66d86422ad17c66e5ae67ce1d32","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"e49506e9895e255e0e53f34a11d325f83109c1b0","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"51faef29f8e464bcb2e73049b428b88c8dd8b40a","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"2ec2ae03c79bb1ae7ac3fcf7e00fb52d1af2898d","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"97e003371b76911522fb93c5180c9fdceed29488","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1663049159000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"7079b27a7bc15a7dfa9209f6be6051bdec49ebad","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"0f02df2244e275595e72163498d42f42bcf0de5e","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1663049159000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1663049159000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1663049159000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1663049159000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"61279540c2623ea4bf93e40613d41380839b92d3","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"127bb5391370afe7fef2a297084d76406bc5e902","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"0aa512c21a4b74ef2e70009786a1858d7c2fae9c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1663049159000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1663049159000},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1663049159000},{"_id":"public/local-search.xml","hash":"0b964f46948d4057011ec749d40d8cd03d8f72cd","modified":1669957658179},{"_id":"public/about/index.html","hash":"5d5abf7947989b7eff5fe9c48c35d08f0abfb8bb","modified":1669957658179},{"_id":"public/archives/index.html","hash":"9ab300ba8ab4f4dd02a961e62156214f59ee8da6","modified":1669957658179},{"_id":"public/archives/2022/index.html","hash":"b16b28f4f4212251bb79239fadbe72bb7bff6008","modified":1669957658179},{"_id":"public/archives/2022/09/index.html","hash":"1fcaf32d98010999988a250fc24a3fe902a403c9","modified":1669957658179},{"_id":"public/archives/2022/10/index.html","hash":"e2bd16fea3be9c811f4145775eb97ab8f8b06e46","modified":1669957658179},{"_id":"public/archives/2022/12/index.html","hash":"d3bc2582a171f9e6fce86eef7425c7cbddad68e6","modified":1669957658179},{"_id":"public/tags/index.html","hash":"7dbc2c1012adfe16ac251d1fce06c2ceb3ee771d","modified":1669957658179},{"_id":"public/categories/index.html","hash":"8ede29ef441fe7587492e4a2d9205221c6e706a7","modified":1669957658179},{"_id":"public/links/index.html","hash":"c6df98d77ef4329809b00bf1665de3705bb339f8","modified":1669957658179},{"_id":"public/404.html","hash":"97aedf9bccb9e0cc57f3bcc4d72c0a7d21773356","modified":1669957658179},{"_id":"public/2022/12/02/Python爬取某东商品数据/index.html","hash":"9d346aaca87b7ee52c855fe072327bb1809e8ae7","modified":1669957658179},{"_id":"public/2022/10/08/test/index.html","hash":"2143a074551df83f7c482907cf0bd5efb6ac7353","modified":1669957658179},{"_id":"public/2022/10/08/百度翻译api接口调用/index.html","hash":"5790f9834bdf1366a0b3e052b70eddd3004b309e","modified":1669957658179},{"_id":"public/2022/09/21/springboot入门搭建/index.html","hash":"ffda75a31c4e1772f7931b835856b374cdbf0575","modified":1669957658179},{"_id":"public/2022/09/21/Java常见异常/index.html","hash":"ab60021c44ae0437824bf2901f618cf6c1ff124c","modified":1669957658179},{"_id":"public/2022/09/21/Java集合的回顾（集合的排序）/index.html","hash":"3db4072de3d8927741820f64f177912ec84133d3","modified":1669957658179},{"_id":"public/2022/09/21/Linux基础篇/index.html","hash":"ee4cf4321333c8628727677425713e8a7ee59255","modified":1669957658179},{"_id":"public/index.html","hash":"3a18c35c2a4f9c02ca94b92865251aa1dbc1fb34","modified":1669957658179},{"_id":"public/img/BlogAboutImg.jpg","hash":"de515968e5f83ddc3698b4c2e3b536b4b367532e","modified":1669957658179},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1669957658179},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1669957658179},{"_id":"public/img/WeChat.png","hash":"ce60d42f6f62ea5b811a58718f19f2c88cee4f27","modified":1669957658179},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1669957658179},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1669957658179},{"_id":"public/2022/12/02/Python爬取某东商品数据/2022-12-02-12-51-15-image.png","hash":"8ba393bd48849acf70b93c334d4f845e10bb3f8b","modified":1669957658179},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1669957658179},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1669957658179},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1669957658179},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1669957658179},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1669957658179},{"_id":"public/css/main.css","hash":"d3b6eb3ef0e222271f1453d3d1214f3ba053792d","modified":1669957658179},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1669957658179},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1669957658179},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1669957658179},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1669957658179},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1669957658179},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1669957658179},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1669957658179},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1669957658179}],"Category":[],"Data":[],"Page":[{"date":"2022-09-15T12:35:17.000Z","title":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ndate: 2022-09-15 20:35:17\ntitle: about\nlayout: about\n---\n","updated":"2022-09-15T14:58:31.156Z","path":"about/index.html","comments":1,"_id":"clb61o8an0000mkg79k7ua0bz","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"_content":"# 1.起因\n\n在学习瑞吉外卖的时候，老师经常把一些逻辑语句放到controller中，导致我对这些代码是该写到controller还是service中很不清楚，我将那段代码发到了java吧，希望大家能给一点建议，代码中有个在foreach中进行查询数据库id删除的操作，大佬们说不能循环中删除，但我也不明白原因，只好查询资料找到了如下的信息。\n\n![Snipaste_2022-08-12_17-32-33](D:\\软件\\工具\\截图工具\\自动保存、\\Snipaste_2022-08-12_17-32-33.png)\n\n\n\n\n\n# 2.学习\n\n## 学习java基础时\n\n我翻看了之前学习java基础时的视频，找到了关于foreach的视频，里面粗略的演示了报错的操作（在循环中删除集合元素），虽然没有具体讲原因，但是我是确实没有记住这个异常。\n\n## 现在\n\n我看了一些博主写的资料，也通过debug去看了源代码的执行过程，发现确实会出现异常**ConcurrentModificationException**，\n\n**贴上发生异常的代码。**\n\n```java\n private class ListItr implements ListIterator<E> {\n        private Node<E> lastReturned;\n        private Node<E> next;\n        private int nextIndex;\n        private int expectedModCount = modCount;\t// modCount会随着对集合的操作次数而相应增加\n\n     // 省略部分代码\n     \n        public void remove() {\n            checkForComodification();\n            if (lastReturned == null)\n                throw new IllegalStateException();\n\n            Node<E> lastNext = lastReturned.next;\n            unlink(lastReturned);\n            if (next == lastReturned)\n                next = lastNext;\n            else\n                nextIndex--;\n            lastReturned = null;\n            expectedModCount++;\n        }\n\n        public void set(E e) {\n            if (lastReturned == null)\n                throw new IllegalStateException();\n            checkForComodification();\n            lastReturned.item = e;\n        }\n\n        public void add(E e) {\n            checkForComodification();\n            lastReturned = null;\n            if (next == null)\n                linkLast(e);\n            else\n                linkBefore(e, next);\n            nextIndex++;\n            expectedModCount++;\n        }\n\n        public void forEachRemaining(Consumer<? super E> action) {\n            Objects.requireNonNull(action);\n            while (modCount == expectedModCount && nextIndex < size) {\n                action.accept(next.item);\n                lastReturned = next;\n                next = next.next;\n                nextIndex++;\n            }\n            checkForComodification();\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                // 异常抛出\n                throw new ConcurrentModificationException();\t\n        }\n    }\n```\n\n\n\n我们知道 java.util.ArrayList不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了list，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在[源码](https://so.csdn.net/so/search?q=源码&spm=1001.2101.3001.7020)中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。在迭代过程中，**判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 list**：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。\n\n## 解决方式\n\n使用迭代器进行操作时能够确保 **modCount 跟 expectedModCount 相等**，从而不会抛出异常\n\n```java\npackage top.plutos;\n\nimport java.util.*;\n\n/**\n * @Author Lunau\n * @Create 2022-08-15 10:13\n * @Description 关于foreach的使用\n * @Result\n */\n\npublic class foreach {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"1\");\n        list.add(\"2\");\n        list.add(\"3\");\n        list.add(\"4\");\n\n        //正确方式\n        Iterator<String> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            String next = iterator.next();\n            if (\"2\".equals(next)) {\n                iterator.remove();\n            }\n        }\n\n//\n//        //错误方式\n//        for (String s : list) {\n//            //删除第二个\n//            if (\"2\".equals(s)) {\n//                list.remove(s);\n//            }\n//        }\n        System.out.println(list.toString());\n    }\n}\n```\n\n# 参考：\n\n[Java 集合中常见 checkForComodification()方法的作用? modCount和expectedModCount作用?_Dwxqnswxl的博客-CSDN博客_expectedmodcount](https://blog.csdn.net/weixin_40254498/article/details/81386920)\n\n[ArrayList底层jdk源码之modCount、expectedModCount解读_技匠三石弟弟的博客-CSDN博客_expectedmodcount](https://blog.csdn.net/xiaoleilei666/article/details/102881314)\n\n[LinkedList之modCount和expectedModCount - 不吃陈皮 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zhangcaiwang/p/7131035.html)\n\n[JAVA集合为什么不能在foreach 循环中添加或删除元素？_java编程艺术的博客-CSDN博客_foreach不能增加删除](https://blog.csdn.net/penriver/article/details/117743726)","source":"_posts/Java常见异常.md","raw":"# 1.起因\n\n在学习瑞吉外卖的时候，老师经常把一些逻辑语句放到controller中，导致我对这些代码是该写到controller还是service中很不清楚，我将那段代码发到了java吧，希望大家能给一点建议，代码中有个在foreach中进行查询数据库id删除的操作，大佬们说不能循环中删除，但我也不明白原因，只好查询资料找到了如下的信息。\n\n![Snipaste_2022-08-12_17-32-33](D:\\软件\\工具\\截图工具\\自动保存、\\Snipaste_2022-08-12_17-32-33.png)\n\n\n\n\n\n# 2.学习\n\n## 学习java基础时\n\n我翻看了之前学习java基础时的视频，找到了关于foreach的视频，里面粗略的演示了报错的操作（在循环中删除集合元素），虽然没有具体讲原因，但是我是确实没有记住这个异常。\n\n## 现在\n\n我看了一些博主写的资料，也通过debug去看了源代码的执行过程，发现确实会出现异常**ConcurrentModificationException**，\n\n**贴上发生异常的代码。**\n\n```java\n private class ListItr implements ListIterator<E> {\n        private Node<E> lastReturned;\n        private Node<E> next;\n        private int nextIndex;\n        private int expectedModCount = modCount;\t// modCount会随着对集合的操作次数而相应增加\n\n     // 省略部分代码\n     \n        public void remove() {\n            checkForComodification();\n            if (lastReturned == null)\n                throw new IllegalStateException();\n\n            Node<E> lastNext = lastReturned.next;\n            unlink(lastReturned);\n            if (next == lastReturned)\n                next = lastNext;\n            else\n                nextIndex--;\n            lastReturned = null;\n            expectedModCount++;\n        }\n\n        public void set(E e) {\n            if (lastReturned == null)\n                throw new IllegalStateException();\n            checkForComodification();\n            lastReturned.item = e;\n        }\n\n        public void add(E e) {\n            checkForComodification();\n            lastReturned = null;\n            if (next == null)\n                linkLast(e);\n            else\n                linkBefore(e, next);\n            nextIndex++;\n            expectedModCount++;\n        }\n\n        public void forEachRemaining(Consumer<? super E> action) {\n            Objects.requireNonNull(action);\n            while (modCount == expectedModCount && nextIndex < size) {\n                action.accept(next.item);\n                lastReturned = next;\n                next = next.next;\n                nextIndex++;\n            }\n            checkForComodification();\n        }\n\n        final void checkForComodification() {\n            if (modCount != expectedModCount)\n                // 异常抛出\n                throw new ConcurrentModificationException();\t\n        }\n    }\n```\n\n\n\n我们知道 java.util.ArrayList不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了list，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在[源码](https://so.csdn.net/so/search?q=源码&spm=1001.2101.3001.7020)中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。在迭代过程中，**判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 list**：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。\n\n## 解决方式\n\n使用迭代器进行操作时能够确保 **modCount 跟 expectedModCount 相等**，从而不会抛出异常\n\n```java\npackage top.plutos;\n\nimport java.util.*;\n\n/**\n * @Author Lunau\n * @Create 2022-08-15 10:13\n * @Description 关于foreach的使用\n * @Result\n */\n\npublic class foreach {\n    public static void main(String[] args) {\n        List<String> list = new ArrayList<>();\n        list.add(\"1\");\n        list.add(\"2\");\n        list.add(\"3\");\n        list.add(\"4\");\n\n        //正确方式\n        Iterator<String> iterator = list.iterator();\n        while (iterator.hasNext()) {\n            String next = iterator.next();\n            if (\"2\".equals(next)) {\n                iterator.remove();\n            }\n        }\n\n//\n//        //错误方式\n//        for (String s : list) {\n//            //删除第二个\n//            if (\"2\".equals(s)) {\n//                list.remove(s);\n//            }\n//        }\n        System.out.println(list.toString());\n    }\n}\n```\n\n# 参考：\n\n[Java 集合中常见 checkForComodification()方法的作用? modCount和expectedModCount作用?_Dwxqnswxl的博客-CSDN博客_expectedmodcount](https://blog.csdn.net/weixin_40254498/article/details/81386920)\n\n[ArrayList底层jdk源码之modCount、expectedModCount解读_技匠三石弟弟的博客-CSDN博客_expectedmodcount](https://blog.csdn.net/xiaoleilei666/article/details/102881314)\n\n[LinkedList之modCount和expectedModCount - 不吃陈皮 - 博客园 (cnblogs.com)](https://www.cnblogs.com/zhangcaiwang/p/7131035.html)\n\n[JAVA集合为什么不能在foreach 循环中添加或删除元素？_java编程艺术的博客-CSDN博客_foreach不能增加删除](https://blog.csdn.net/penriver/article/details/117743726)","slug":"Java常见异常","published":1,"date":"2022-09-21T03:19:07.044Z","updated":"2022-08-16T09:02:30.452Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8aq0001mkg79q52aph1","content":"<h1 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1.起因\"></a>1.起因</h1><p>在学习瑞吉外卖的时候，老师经常把一些逻辑语句放到controller中，导致我对这些代码是该写到controller还是service中很不清楚，我将那段代码发到了java吧，希望大家能给一点建议，代码中有个在foreach中进行查询数据库id删除的操作，大佬们说不能循环中删除，但我也不明白原因，只好查询资料找到了如下的信息。</p>\n<p><img src=\"D:\\软件\\工具\\截图工具\\自动保存、\\Snipaste_2022-08-12_17-32-33.png\" alt=\"Snipaste_2022-08-12_17-32-33\"></p>\n<h1 id=\"2-学习\"><a href=\"#2-学习\" class=\"headerlink\" title=\"2.学习\"></a>2.学习</h1><h2 id=\"学习java基础时\"><a href=\"#学习java基础时\" class=\"headerlink\" title=\"学习java基础时\"></a>学习java基础时</h2><p>我翻看了之前学习java基础时的视频，找到了关于foreach的视频，里面粗略的演示了报错的操作（在循环中删除集合元素），虽然没有具体讲原因，但是我是确实没有记住这个异常。</p>\n<h2 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h2><p>我看了一些博主写的资料，也通过debug去看了源代码的执行过程，发现确实会出现异常<strong>ConcurrentModificationException</strong>，</p>\n<p><strong>贴上发生异常的代码。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListItr</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ListIterator</span>&lt;E&gt; &#123;<br>       <span class=\"hljs-keyword\">private</span> Node&lt;E&gt; lastReturned;<br>       <span class=\"hljs-keyword\">private</span> Node&lt;E&gt; next;<br>       <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> nextIndex;<br>       <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">expectedModCount</span> <span class=\"hljs-operator\">=</span> modCount;\t<span class=\"hljs-comment\">// modCount会随着对集合的操作次数而相应增加</span><br><br>    <span class=\"hljs-comment\">// 省略部分代码</span><br>    <br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> &#123;<br>           checkForComodification();<br>           <span class=\"hljs-keyword\">if</span> (lastReturned == <span class=\"hljs-literal\">null</span>)<br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>();<br><br>           Node&lt;E&gt; lastNext = lastReturned.next;<br>           unlink(lastReturned);<br>           <span class=\"hljs-keyword\">if</span> (next == lastReturned)<br>               next = lastNext;<br>           <span class=\"hljs-keyword\">else</span><br>               nextIndex--;<br>           lastReturned = <span class=\"hljs-literal\">null</span>;<br>           expectedModCount++;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(E e)</span> &#123;<br>           <span class=\"hljs-keyword\">if</span> (lastReturned == <span class=\"hljs-literal\">null</span>)<br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>();<br>           checkForComodification();<br>           lastReturned.item = e;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>           checkForComodification();<br>           lastReturned = <span class=\"hljs-literal\">null</span>;<br>           <span class=\"hljs-keyword\">if</span> (next == <span class=\"hljs-literal\">null</span>)<br>               linkLast(e);<br>           <span class=\"hljs-keyword\">else</span><br>               linkBefore(e, next);<br>           nextIndex++;<br>           expectedModCount++;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">forEachRemaining</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> E&gt; action)</span> &#123;<br>           Objects.requireNonNull(action);<br>           <span class=\"hljs-keyword\">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;<br>               action.accept(next.item);<br>               lastReturned = next;<br>               next = next.next;<br>               nextIndex++;<br>           &#125;<br>           checkForComodification();<br>       &#125;<br><br>       <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkForComodification</span><span class=\"hljs-params\">()</span> &#123;<br>           <span class=\"hljs-keyword\">if</span> (modCount != expectedModCount)<br>               <span class=\"hljs-comment\">// 异常抛出</span><br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentModificationException</span>();\t<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>我们知道 java.util.ArrayList不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了list，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在<a href=\"https://so.csdn.net/so/search?q=%E6%BA%90%E7%A0%81&spm=1001.2101.3001.7020\">源码</a>中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。在迭代过程中，<strong>判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 list</strong>：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。</p>\n<h2 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h2><p>使用迭代器进行操作时能够确保 <strong>modCount 跟 expectedModCount 相等</strong>，从而不会抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> top.plutos;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> Lunau</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Create</span> 2022-08-15 10:13</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 关于foreach的使用</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Result</span></span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">foreach</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        list.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>        list.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>        list.add(<span class=\"hljs-string\">&quot;3&quot;</span>);<br>        list.add(<span class=\"hljs-string\">&quot;4&quot;</span>);<br><br>        <span class=\"hljs-comment\">//正确方式</span><br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> iterator.next();<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;2&quot;</span>.equals(next)) &#123;<br>                iterator.remove();<br>            &#125;<br>        &#125;<br><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//        //错误方式</span><br><span class=\"hljs-comment\">//        for (String s : list) &#123;</span><br><span class=\"hljs-comment\">//            //删除第二个</span><br><span class=\"hljs-comment\">//            if (&quot;2&quot;.equals(s)) &#123;</span><br><span class=\"hljs-comment\">//                list.remove(s);</span><br><span class=\"hljs-comment\">//            &#125;</span><br><span class=\"hljs-comment\">//        &#125;</span><br>        System.out.println(list.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://blog.csdn.net/weixin_40254498/article/details/81386920\">Java 集合中常见 checkForComodification()方法的作用? modCount和expectedModCount作用?_Dwxqnswxl的博客-CSDN博客_expectedmodcount</a></p>\n<p><a href=\"https://blog.csdn.net/xiaoleilei666/article/details/102881314\">ArrayList底层jdk源码之modCount、expectedModCount解读_技匠三石弟弟的博客-CSDN博客_expectedmodcount</a></p>\n<p><a href=\"https://www.cnblogs.com/zhangcaiwang/p/7131035.html\">LinkedList之modCount和expectedModCount - 不吃陈皮 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/penriver/article/details/117743726\">JAVA集合为什么不能在foreach 循环中添加或删除元素？_java编程艺术的博客-CSDN博客_foreach不能增加删除</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-起因\"><a href=\"#1-起因\" class=\"headerlink\" title=\"1.起因\"></a>1.起因</h1><p>在学习瑞吉外卖的时候，老师经常把一些逻辑语句放到controller中，导致我对这些代码是该写到controller还是service中很不清楚，我将那段代码发到了java吧，希望大家能给一点建议，代码中有个在foreach中进行查询数据库id删除的操作，大佬们说不能循环中删除，但我也不明白原因，只好查询资料找到了如下的信息。</p>\n<p><img src=\"D:\\软件\\工具\\截图工具\\自动保存、\\Snipaste_2022-08-12_17-32-33.png\" alt=\"Snipaste_2022-08-12_17-32-33\"></p>\n<h1 id=\"2-学习\"><a href=\"#2-学习\" class=\"headerlink\" title=\"2.学习\"></a>2.学习</h1><h2 id=\"学习java基础时\"><a href=\"#学习java基础时\" class=\"headerlink\" title=\"学习java基础时\"></a>学习java基础时</h2><p>我翻看了之前学习java基础时的视频，找到了关于foreach的视频，里面粗略的演示了报错的操作（在循环中删除集合元素），虽然没有具体讲原因，但是我是确实没有记住这个异常。</p>\n<h2 id=\"现在\"><a href=\"#现在\" class=\"headerlink\" title=\"现在\"></a>现在</h2><p>我看了一些博主写的资料，也通过debug去看了源代码的执行过程，发现确实会出现异常<strong>ConcurrentModificationException</strong>，</p>\n<p><strong>贴上发生异常的代码。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListItr</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">ListIterator</span>&lt;E&gt; &#123;<br>       <span class=\"hljs-keyword\">private</span> Node&lt;E&gt; lastReturned;<br>       <span class=\"hljs-keyword\">private</span> Node&lt;E&gt; next;<br>       <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> nextIndex;<br>       <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">expectedModCount</span> <span class=\"hljs-operator\">=</span> modCount;\t<span class=\"hljs-comment\">// modCount会随着对集合的操作次数而相应增加</span><br><br>    <span class=\"hljs-comment\">// 省略部分代码</span><br>    <br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">()</span> &#123;<br>           checkForComodification();<br>           <span class=\"hljs-keyword\">if</span> (lastReturned == <span class=\"hljs-literal\">null</span>)<br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>();<br><br>           Node&lt;E&gt; lastNext = lastReturned.next;<br>           unlink(lastReturned);<br>           <span class=\"hljs-keyword\">if</span> (next == lastReturned)<br>               next = lastNext;<br>           <span class=\"hljs-keyword\">else</span><br>               nextIndex--;<br>           lastReturned = <span class=\"hljs-literal\">null</span>;<br>           expectedModCount++;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">set</span><span class=\"hljs-params\">(E e)</span> &#123;<br>           <span class=\"hljs-keyword\">if</span> (lastReturned == <span class=\"hljs-literal\">null</span>)<br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalStateException</span>();<br>           checkForComodification();<br>           lastReturned.item = e;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(E e)</span> &#123;<br>           checkForComodification();<br>           lastReturned = <span class=\"hljs-literal\">null</span>;<br>           <span class=\"hljs-keyword\">if</span> (next == <span class=\"hljs-literal\">null</span>)<br>               linkLast(e);<br>           <span class=\"hljs-keyword\">else</span><br>               linkBefore(e, next);<br>           nextIndex++;<br>           expectedModCount++;<br>       &#125;<br><br>       <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">forEachRemaining</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> E&gt; action)</span> &#123;<br>           Objects.requireNonNull(action);<br>           <span class=\"hljs-keyword\">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;<br>               action.accept(next.item);<br>               lastReturned = next;<br>               next = next.next;<br>               nextIndex++;<br>           &#125;<br>           checkForComodification();<br>       &#125;<br><br>       <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">checkForComodification</span><span class=\"hljs-params\">()</span> &#123;<br>           <span class=\"hljs-keyword\">if</span> (modCount != expectedModCount)<br>               <span class=\"hljs-comment\">// 异常抛出</span><br>               <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConcurrentModificationException</span>();\t<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure>\n\n\n\n<p>我们知道 java.util.ArrayList不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了list，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在<a href=\"https://so.csdn.net/so/search?q=%E6%BA%90%E7%A0%81&spm=1001.2101.3001.7020\">源码</a>中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。在迭代过程中，<strong>判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 list</strong>：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。</p>\n<h2 id=\"解决方式\"><a href=\"#解决方式\" class=\"headerlink\" title=\"解决方式\"></a>解决方式</h2><p>使用迭代器进行操作时能够确保 <strong>modCount 跟 expectedModCount 相等</strong>，从而不会抛出异常</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> top.plutos;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> Lunau</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Create</span> 2022-08-15 10:13</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 关于foreach的使用</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Result</span></span><br><span class=\"hljs-comment\"> */</span><br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">foreach</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        list.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>        list.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>        list.add(<span class=\"hljs-string\">&quot;3&quot;</span>);<br>        list.add(<span class=\"hljs-string\">&quot;4&quot;</span>);<br><br>        <span class=\"hljs-comment\">//正确方式</span><br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class=\"hljs-keyword\">while</span> (iterator.hasNext()) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">next</span> <span class=\"hljs-operator\">=</span> iterator.next();<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;2&quot;</span>.equals(next)) &#123;<br>                iterator.remove();<br>            &#125;<br>        &#125;<br><br><span class=\"hljs-comment\">//</span><br><span class=\"hljs-comment\">//        //错误方式</span><br><span class=\"hljs-comment\">//        for (String s : list) &#123;</span><br><span class=\"hljs-comment\">//            //删除第二个</span><br><span class=\"hljs-comment\">//            if (&quot;2&quot;.equals(s)) &#123;</span><br><span class=\"hljs-comment\">//                list.remove(s);</span><br><span class=\"hljs-comment\">//            &#125;</span><br><span class=\"hljs-comment\">//        &#125;</span><br>        System.out.println(list.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h1><p><a href=\"https://blog.csdn.net/weixin_40254498/article/details/81386920\">Java 集合中常见 checkForComodification()方法的作用? modCount和expectedModCount作用?_Dwxqnswxl的博客-CSDN博客_expectedmodcount</a></p>\n<p><a href=\"https://blog.csdn.net/xiaoleilei666/article/details/102881314\">ArrayList底层jdk源码之modCount、expectedModCount解读_技匠三石弟弟的博客-CSDN博客_expectedmodcount</a></p>\n<p><a href=\"https://www.cnblogs.com/zhangcaiwang/p/7131035.html\">LinkedList之modCount和expectedModCount - 不吃陈皮 - 博客园 (cnblogs.com)</a></p>\n<p><a href=\"https://blog.csdn.net/penriver/article/details/117743726\">JAVA集合为什么不能在foreach 循环中添加或删除元素？_java编程艺术的博客-CSDN博客_foreach不能增加删除</a></p>\n"},{"_content":"# Linux基础篇\n\n## 1.1 vi、vim快速入门\n\n![image-20220413100321862](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413100321862.png)\n\n## 1.2 vi、vim快捷键\n\n**[ ]中的内容是提示信息**\n\n```shell\n# 拷贝当前行 光标放置哪一行就拷贝当前行\tyy是复制，p是粘贴\tyyp就是复制当前行并且粘贴，相当于Ctrl+D\n[一般模式] yyp\n# 拷贝当前行向下的n行\n[一般模式] n yyp\n# 在文件中查找某个单词\n[命令模式] /关键字+回车 n[查找下一个]\n# 设置文件的行号\n[命令模式] :set nu\n# 取消文件的行号\n[命令模式] :set nonu\n# 快速到达文件顶端或末端\n[一般模式] G[末端]\n[一般模式] gg[顶端]\n# 移动光标到某一行\tn代表移动到第n行\n[一般模式] n+shift键+g\n# 撤销动作\n[一般模式] u\n```\n\n## 2. 开机、重启和用户登录注销\n\n```shell\n# 立刻进行关机\nshutdown -h now\n# 1分钟后关机\t加提示信息，可以提醒到每个登录该终端的用户\nshutdown -h 1\n# 现在重启计算机\nshutdown -r now\n# 关机\nhalt\n# 现在重启计算机\nreboot\n# 把内存中数据同步到磁盘\nsync\n```\n\n**注意**\n\n1. 不管重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中\n2. 目前的shutdown、reboot、halt等命令均已经在关机前进行了sync，但是不确保所有都有，所以建议执行这些命令前先执行sync\n\n### 2.1 登录注销\n\n```shell\n# 切换用户\nsu 用户名\n# 注销用户 在提示符下有效\nlogout\n```\n\n**注意**\n\n1. logout在图形运行级别无效，在运行级别3下有效\n\n## 3. 用户管理\n\n### 3.1 添加、删除和查看用户\n\n```shell\n# 添加用户 添加用户后会产生一个和用户名同名的家目录\nuseradd 用户名\n# 添加用户 给新用户指定家目录\nuseradd -d 目录 用户名\n# 修改密码\npasswd 用户名\n# 删除用户 保留家目录\nuserdel 用户名\n# 删除用户和家目录\nuserdel -r 用户名\n# 查看指定用户信息\nid 用户名\n# 查看当前用户/登录用户\nwho am i 或者 whoami 或者 who\n```\n\n **一般情况建议保留家目录** \n\n### 3.2 用户组\n\n介绍：类似于角色，系统可以对有共性/权限的多个用户进行同一管理\n\n```shell\n# 创建用户组\ngroupadd 组名\n# 删除用户组\ngroupdel 组名\n# 创建用户并指定到用户组\nuseradd -g 组名 用户名\n# 修改用户的组\nusermod -g 组名 用户名\n```\n\n### 3.3 切换用户\n\n介绍：在操作Linux中，如果当前用户的权限不够，可以通过切换到更高权限的用户来执行操作\n\n```shell\n# 切换用户\nsu 用户名 或者 su - 用户名\n```\n\n**注意**：\n\n1. 从权限高的用户切到权限低的用户的时候不需要输入密码，反之亦然\n2. 当需要返回到原来的用户时，需要输入exit/logout\n\n### 3.4 用户组和相关文件\n\n![image-20220413215641130](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413215641130.png)\n\n## 4.文件目录类\n\n### 指令\n\n#### pwd\n\n基本语法：pwd（功能描述：显示当前工作目录的绝对路径）\n\n#### ls\n\n基本语法：ls 【选项】【文件或者目录】\n\n常用选项\n\n-a 显示当前目录的所有文件和目录，包括隐藏\n\n-l 以列表的方式显示信息\n\n#### cd\n\n基本语法：cd 【参数】（功能描述：切换到指定目录）\n\n理解：绝对路径和相对路径\n\ncd或者cd ~ ：回到自己的家目录\n\ncd .. 回到当前目录的上一级目录\n\n案例\n\n1. 使用绝对路径切换到root目录\tcd /root\n2. 使用相对路径到/root目录     cd ../../roor\n3. 回到家目录和上一级目录 cd ~ cd ..\n\n#### mkdir\n\n基本语法：mkdir 【选项】【要创建的目录】（用于创建目录）\n\n常用选项：-p（创建多级目录）\n\n案例\n\n1. 创建一个目录 /home/dog\tmkdir /home/dog\n2. 创建多级目录 /home/animal/tiger  mkdir -p /home/animal/tiger\n\n#### rmdir\n\n基本语法：rmdir 【选项】【要删除的空目录】（用于删除空目录）\n\n案例\n\n删除一个目录 /home/dog \trmdir /home/dog\n\n细节\n\nrmdir删除的是空目录，如果目录下有内容时无法删除，但是可以通过 rm -rf 强制删除\n\n#### touch\n\n基本语法：touch 【文件名称】（用于创建空文件）\n\n案例：创建一个空文件 hello.txt   \ttouch hello.txt\n\n#### cp\n\n基本语法：cp 【选项】source dest （用于拷贝文件到指定目录）\n\n常用选项\n\n-r 递归复制整个文件夹\n\n案例\n\n1. 将home/hello.txt 拷贝到home/bbb目录下\n2. 递归复制整个文件夹，将/home/bbb整个目录，拷贝到/opt\n\n强制覆盖不提示的方法 /cp\n\n#### mv\n\nmv移动文件或目录或重命名\n\n基本语法\n\nmv oldNameFile newNameFile (**在同一目录下是重命名**)\n\nmv /temp/moveFile /targect\t(**不同目录下是移动**)\n\n案例\n\n1. 将/home 下的cat.txt重命名为pig.txt\tmv cat.txt pig.txt\n2. 将/home下的pig.txt移动到/root     mv pig.txt ../root\n3. 移动整个目录，将sunjunhao移动到/home下 mv sunjunhao ../home\n\n#### cat\n\n查看文件内容\n\n基本语法：cat 【选项】要查看的内容\n\n常用选项：-n显示行号\n\n案例：查看/etc/profile 文件内容并显示行号 cat -n /etc/profile\n\n细节：cat只能浏览文件，不能修改文件内容，为了浏览方便，一般带上管道命令|more\n\ncat -n /etc/profile | more \n\n#### more\n\nmore指令是基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文件内容，more指令中内置若干快捷键\n\n![image-20220420083303584](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083303584.png)\n\n案例：采用more查看文件\tmore /etc/profile\n\n#### less\n\nless在显示文件是根据浏览时加载，不是一次加载完毕，对于浏览大文件很有效\n\n基本语法：less 要查看的文件\n\n![image-20220420083800298](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083800298.png)\n\n#### echo\n\necho 输出内容到控制台\n\n基本语法：echo 【选项】要输出的内容\n\n案例：\n\n使用echo输出环境变量，$PATH $HOSTNAME\n\n使用echo 输出hello world\n\n#### head\n\n显示文件内容的开头部分内容\n\n基本语法\n\nhead 文件（查看前十行内容）\n\nhead -n 5 文件（查看前五行内容 ，5可修改）\n\n案例：查看/etc/profile前五行内容 head  -n 5 /etc/profile\n\n#### tail\n\n用于输出文件尾部中的内容，默认情况tail显示后十行内容\n\n基本语法：tail 文件\n\ntail -n 5 文件\n\ntail -f 文件 （实时追踪该文档的所有更新）\n\n案例：\n\n查看/etc/profile最后五行\ttail -n 5 /etc/profile\n\n实时监控 mydate.txt \ttail -f /home/mydate.txt\n\n#### > >>\n\n\">\"输出重定向和\">>\"追加\n\n基本语法\n\n1. ls -l >文件 （将列表的内容写入a.txt（覆盖写））\n2. ls -a >>文件 （列表的内容追加到文件aa.txt末尾）\n3. cat 文件1 > 文件2（将文件1的内容覆盖到文件2）\n4. echo 内容>>文件 （追加）\n\n案例\n\n将/home 目录下的文件列表写入到/home/info.txt中，覆盖写入\t在home目录下 ls -l > info.txt\n\n将当前日历信息追加到/home/mycal\tcal > mycal\n\n#### ln\n\n软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径\n\n基本语法：ln -s【原文件或目录】【软链接名】（给原文件创建一个软链接）\n\n案例\n\n1. 在/home 目录下创建一个软链接myroot 链接到/root目录     ln -s /root /home/myroot\n2. 删除软链接 myroot    rm /home/myroot\n\n细节\n\n当使用pwd查看目录是，仍然看到的是软链接所在目录\n\n#### history\n\n查看已经执行过的历史命令，也可以执行历史命令\n\n基本语法：history\n\n案例\n\n显示所有历史命令 history\n\n显示最近的10个指令 history 10\n\n执行编号为5的指令  \t!5\n\n## 5.时间日期类\n\n### 1.date显示当前日期\n\n```shell\n# 显示当前时间\ndate\n# 显示当前年份\ndate +%Y\n# 显示当前月份\ndate +%m\n# 显示当前是哪一天\ndate +%d\n# 显示年月日时分秒\ndate +%Y-%d%H:%M:%S\n```\n\n案例\t记得加上双引号\n\n显示当前时间信息 date\n\n显示当前时间年月日\n\ndate \"+%Y-%m-%d\"\n\n### 2.date设置日期\n\n```shell\ndate -s 字符串时间\n# 案例\n# 设置系统当前时间\ndate -s \"2022-4-20 10:00:00\"\n```\n\n### 3.cal指令\n\n```shell\n# 查看日历指令\ncal\n# 基本语法\ncal 【选项】\n# 案例\n# 显示当前日历 cal\n# 显示2022年日历 cal 2022\n```\n\n## 6.搜索查找类\n\n### 1.find指令\n\nfind指令从指定目录向下递归地遍历其各个子目录，将满足条件的文件或目录显示在终端\n\n![image-20220420095550428](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420095550428.png)\n\n\n\n```shell\n# 基本语法\nfind 【搜索范围】【选项】\n# 案例\n# 按文件名，根据名称查找/home目录下的hello.txt文件\nfind /home -name hello.txt\n# 按拥有者，查找/opt目录下。用户名为noboby的文件\nfind /opt -user nobby\n# 查找整个Linux系统下大于200M的文件（+n大于 -n小于 n等于，单位k，M，G）\nfind / -size +200M\n```\n\n\n\n****\n","source":"_posts/Linux基础篇.md","raw":"# Linux基础篇\n\n## 1.1 vi、vim快速入门\n\n![image-20220413100321862](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413100321862.png)\n\n## 1.2 vi、vim快捷键\n\n**[ ]中的内容是提示信息**\n\n```shell\n# 拷贝当前行 光标放置哪一行就拷贝当前行\tyy是复制，p是粘贴\tyyp就是复制当前行并且粘贴，相当于Ctrl+D\n[一般模式] yyp\n# 拷贝当前行向下的n行\n[一般模式] n yyp\n# 在文件中查找某个单词\n[命令模式] /关键字+回车 n[查找下一个]\n# 设置文件的行号\n[命令模式] :set nu\n# 取消文件的行号\n[命令模式] :set nonu\n# 快速到达文件顶端或末端\n[一般模式] G[末端]\n[一般模式] gg[顶端]\n# 移动光标到某一行\tn代表移动到第n行\n[一般模式] n+shift键+g\n# 撤销动作\n[一般模式] u\n```\n\n## 2. 开机、重启和用户登录注销\n\n```shell\n# 立刻进行关机\nshutdown -h now\n# 1分钟后关机\t加提示信息，可以提醒到每个登录该终端的用户\nshutdown -h 1\n# 现在重启计算机\nshutdown -r now\n# 关机\nhalt\n# 现在重启计算机\nreboot\n# 把内存中数据同步到磁盘\nsync\n```\n\n**注意**\n\n1. 不管重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中\n2. 目前的shutdown、reboot、halt等命令均已经在关机前进行了sync，但是不确保所有都有，所以建议执行这些命令前先执行sync\n\n### 2.1 登录注销\n\n```shell\n# 切换用户\nsu 用户名\n# 注销用户 在提示符下有效\nlogout\n```\n\n**注意**\n\n1. logout在图形运行级别无效，在运行级别3下有效\n\n## 3. 用户管理\n\n### 3.1 添加、删除和查看用户\n\n```shell\n# 添加用户 添加用户后会产生一个和用户名同名的家目录\nuseradd 用户名\n# 添加用户 给新用户指定家目录\nuseradd -d 目录 用户名\n# 修改密码\npasswd 用户名\n# 删除用户 保留家目录\nuserdel 用户名\n# 删除用户和家目录\nuserdel -r 用户名\n# 查看指定用户信息\nid 用户名\n# 查看当前用户/登录用户\nwho am i 或者 whoami 或者 who\n```\n\n **一般情况建议保留家目录** \n\n### 3.2 用户组\n\n介绍：类似于角色，系统可以对有共性/权限的多个用户进行同一管理\n\n```shell\n# 创建用户组\ngroupadd 组名\n# 删除用户组\ngroupdel 组名\n# 创建用户并指定到用户组\nuseradd -g 组名 用户名\n# 修改用户的组\nusermod -g 组名 用户名\n```\n\n### 3.3 切换用户\n\n介绍：在操作Linux中，如果当前用户的权限不够，可以通过切换到更高权限的用户来执行操作\n\n```shell\n# 切换用户\nsu 用户名 或者 su - 用户名\n```\n\n**注意**：\n\n1. 从权限高的用户切到权限低的用户的时候不需要输入密码，反之亦然\n2. 当需要返回到原来的用户时，需要输入exit/logout\n\n### 3.4 用户组和相关文件\n\n![image-20220413215641130](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413215641130.png)\n\n## 4.文件目录类\n\n### 指令\n\n#### pwd\n\n基本语法：pwd（功能描述：显示当前工作目录的绝对路径）\n\n#### ls\n\n基本语法：ls 【选项】【文件或者目录】\n\n常用选项\n\n-a 显示当前目录的所有文件和目录，包括隐藏\n\n-l 以列表的方式显示信息\n\n#### cd\n\n基本语法：cd 【参数】（功能描述：切换到指定目录）\n\n理解：绝对路径和相对路径\n\ncd或者cd ~ ：回到自己的家目录\n\ncd .. 回到当前目录的上一级目录\n\n案例\n\n1. 使用绝对路径切换到root目录\tcd /root\n2. 使用相对路径到/root目录     cd ../../roor\n3. 回到家目录和上一级目录 cd ~ cd ..\n\n#### mkdir\n\n基本语法：mkdir 【选项】【要创建的目录】（用于创建目录）\n\n常用选项：-p（创建多级目录）\n\n案例\n\n1. 创建一个目录 /home/dog\tmkdir /home/dog\n2. 创建多级目录 /home/animal/tiger  mkdir -p /home/animal/tiger\n\n#### rmdir\n\n基本语法：rmdir 【选项】【要删除的空目录】（用于删除空目录）\n\n案例\n\n删除一个目录 /home/dog \trmdir /home/dog\n\n细节\n\nrmdir删除的是空目录，如果目录下有内容时无法删除，但是可以通过 rm -rf 强制删除\n\n#### touch\n\n基本语法：touch 【文件名称】（用于创建空文件）\n\n案例：创建一个空文件 hello.txt   \ttouch hello.txt\n\n#### cp\n\n基本语法：cp 【选项】source dest （用于拷贝文件到指定目录）\n\n常用选项\n\n-r 递归复制整个文件夹\n\n案例\n\n1. 将home/hello.txt 拷贝到home/bbb目录下\n2. 递归复制整个文件夹，将/home/bbb整个目录，拷贝到/opt\n\n强制覆盖不提示的方法 /cp\n\n#### mv\n\nmv移动文件或目录或重命名\n\n基本语法\n\nmv oldNameFile newNameFile (**在同一目录下是重命名**)\n\nmv /temp/moveFile /targect\t(**不同目录下是移动**)\n\n案例\n\n1. 将/home 下的cat.txt重命名为pig.txt\tmv cat.txt pig.txt\n2. 将/home下的pig.txt移动到/root     mv pig.txt ../root\n3. 移动整个目录，将sunjunhao移动到/home下 mv sunjunhao ../home\n\n#### cat\n\n查看文件内容\n\n基本语法：cat 【选项】要查看的内容\n\n常用选项：-n显示行号\n\n案例：查看/etc/profile 文件内容并显示行号 cat -n /etc/profile\n\n细节：cat只能浏览文件，不能修改文件内容，为了浏览方便，一般带上管道命令|more\n\ncat -n /etc/profile | more \n\n#### more\n\nmore指令是基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文件内容，more指令中内置若干快捷键\n\n![image-20220420083303584](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083303584.png)\n\n案例：采用more查看文件\tmore /etc/profile\n\n#### less\n\nless在显示文件是根据浏览时加载，不是一次加载完毕，对于浏览大文件很有效\n\n基本语法：less 要查看的文件\n\n![image-20220420083800298](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083800298.png)\n\n#### echo\n\necho 输出内容到控制台\n\n基本语法：echo 【选项】要输出的内容\n\n案例：\n\n使用echo输出环境变量，$PATH $HOSTNAME\n\n使用echo 输出hello world\n\n#### head\n\n显示文件内容的开头部分内容\n\n基本语法\n\nhead 文件（查看前十行内容）\n\nhead -n 5 文件（查看前五行内容 ，5可修改）\n\n案例：查看/etc/profile前五行内容 head  -n 5 /etc/profile\n\n#### tail\n\n用于输出文件尾部中的内容，默认情况tail显示后十行内容\n\n基本语法：tail 文件\n\ntail -n 5 文件\n\ntail -f 文件 （实时追踪该文档的所有更新）\n\n案例：\n\n查看/etc/profile最后五行\ttail -n 5 /etc/profile\n\n实时监控 mydate.txt \ttail -f /home/mydate.txt\n\n#### > >>\n\n\">\"输出重定向和\">>\"追加\n\n基本语法\n\n1. ls -l >文件 （将列表的内容写入a.txt（覆盖写））\n2. ls -a >>文件 （列表的内容追加到文件aa.txt末尾）\n3. cat 文件1 > 文件2（将文件1的内容覆盖到文件2）\n4. echo 内容>>文件 （追加）\n\n案例\n\n将/home 目录下的文件列表写入到/home/info.txt中，覆盖写入\t在home目录下 ls -l > info.txt\n\n将当前日历信息追加到/home/mycal\tcal > mycal\n\n#### ln\n\n软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径\n\n基本语法：ln -s【原文件或目录】【软链接名】（给原文件创建一个软链接）\n\n案例\n\n1. 在/home 目录下创建一个软链接myroot 链接到/root目录     ln -s /root /home/myroot\n2. 删除软链接 myroot    rm /home/myroot\n\n细节\n\n当使用pwd查看目录是，仍然看到的是软链接所在目录\n\n#### history\n\n查看已经执行过的历史命令，也可以执行历史命令\n\n基本语法：history\n\n案例\n\n显示所有历史命令 history\n\n显示最近的10个指令 history 10\n\n执行编号为5的指令  \t!5\n\n## 5.时间日期类\n\n### 1.date显示当前日期\n\n```shell\n# 显示当前时间\ndate\n# 显示当前年份\ndate +%Y\n# 显示当前月份\ndate +%m\n# 显示当前是哪一天\ndate +%d\n# 显示年月日时分秒\ndate +%Y-%d%H:%M:%S\n```\n\n案例\t记得加上双引号\n\n显示当前时间信息 date\n\n显示当前时间年月日\n\ndate \"+%Y-%m-%d\"\n\n### 2.date设置日期\n\n```shell\ndate -s 字符串时间\n# 案例\n# 设置系统当前时间\ndate -s \"2022-4-20 10:00:00\"\n```\n\n### 3.cal指令\n\n```shell\n# 查看日历指令\ncal\n# 基本语法\ncal 【选项】\n# 案例\n# 显示当前日历 cal\n# 显示2022年日历 cal 2022\n```\n\n## 6.搜索查找类\n\n### 1.find指令\n\nfind指令从指定目录向下递归地遍历其各个子目录，将满足条件的文件或目录显示在终端\n\n![image-20220420095550428](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420095550428.png)\n\n\n\n```shell\n# 基本语法\nfind 【搜索范围】【选项】\n# 案例\n# 按文件名，根据名称查找/home目录下的hello.txt文件\nfind /home -name hello.txt\n# 按拥有者，查找/opt目录下。用户名为noboby的文件\nfind /opt -user nobby\n# 查找整个Linux系统下大于200M的文件（+n大于 -n小于 n等于，单位k，M，G）\nfind / -size +200M\n```\n\n\n\n****\n","slug":"Linux基础篇","published":1,"date":"2022-09-21T03:18:24.869Z","updated":"2022-05-27T14:57:22.326Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8at0002mkg7fum7412j","content":"<h1 id=\"Linux基础篇\"><a href=\"#Linux基础篇\" class=\"headerlink\" title=\"Linux基础篇\"></a>Linux基础篇</h1><h2 id=\"1-1-vi、vim快速入门\"><a href=\"#1-1-vi、vim快速入门\" class=\"headerlink\" title=\"1.1 vi、vim快速入门\"></a>1.1 vi、vim快速入门</h2><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413100321862.png\" alt=\"image-20220413100321862\"></p>\n<h2 id=\"1-2-vi、vim快捷键\"><a href=\"#1-2-vi、vim快捷键\" class=\"headerlink\" title=\"1.2 vi、vim快捷键\"></a>1.2 vi、vim快捷键</h2><p><strong>[ ]中的内容是提示信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">拷贝当前行 光标放置哪一行就拷贝当前行\tyy是复制，p是粘贴\tyyp就是复制当前行并且粘贴，相当于Ctrl+D</span><br>[一般模式] yyp<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">拷贝当前行向下的n行</span><br>[一般模式] n yyp<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在文件中查找某个单词</span><br>[命令模式] /关键字+回车 n[查找下一个]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置文件的行号</span><br>[命令模式] :set nu<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">取消文件的行号</span><br>[命令模式] :set nonu<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">快速到达文件顶端或末端</span><br>[一般模式] G[末端]<br>[一般模式] gg[顶端]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">移动光标到某一行\tn代表移动到第n行</span><br>[一般模式] n+shift键+g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">撤销动作</span><br>[一般模式] u<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-开机、重启和用户登录注销\"><a href=\"#2-开机、重启和用户登录注销\" class=\"headerlink\" title=\"2. 开机、重启和用户登录注销\"></a>2. 开机、重启和用户登录注销</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">立刻进行关机</span><br>shutdown -h now<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1分钟后关机\t加提示信息，可以提醒到每个登录该终端的用户</span><br>shutdown -h 1<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">现在重启计算机</span><br>shutdown -r now<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">关机</span><br>halt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">现在重启计算机</span><br>reboot<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把内存中数据同步到磁盘</span><br>sync<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li>不管重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</li>\n<li>目前的shutdown、reboot、halt等命令均已经在关机前进行了sync，但是不确保所有都有，所以建议执行这些命令前先执行sync</li>\n</ol>\n<h3 id=\"2-1-登录注销\"><a href=\"#2-1-登录注销\" class=\"headerlink\" title=\"2.1 登录注销\"></a>2.1 登录注销</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">切换用户</span><br>su 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注销用户 在提示符下有效</span><br>logout<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li>logout在图形运行级别无效，在运行级别3下有效</li>\n</ol>\n<h2 id=\"3-用户管理\"><a href=\"#3-用户管理\" class=\"headerlink\" title=\"3. 用户管理\"></a>3. 用户管理</h2><h3 id=\"3-1-添加、删除和查看用户\"><a href=\"#3-1-添加、删除和查看用户\" class=\"headerlink\" title=\"3.1 添加、删除和查看用户\"></a>3.1 添加、删除和查看用户</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加用户 添加用户后会产生一个和用户名同名的家目录</span><br>useradd 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加用户 给新用户指定家目录</span><br>useradd -d 目录 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改密码</span><br>passwd 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除用户 保留家目录</span><br>userdel 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除用户和家目录</span><br>userdel -r 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看指定用户信息</span><br>id 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前用户/登录用户</span><br>who am i 或者 whoami 或者 who<br></code></pre></td></tr></table></figure>\n\n<p> <strong>一般情况建议保留家目录</strong> </p>\n<h3 id=\"3-2-用户组\"><a href=\"#3-2-用户组\" class=\"headerlink\" title=\"3.2 用户组\"></a>3.2 用户组</h3><p>介绍：类似于角色，系统可以对有共性/权限的多个用户进行同一管理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建用户组</span><br>groupadd 组名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除用户组</span><br>groupdel 组名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建用户并指定到用户组</span><br>useradd -g 组名 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改用户的组</span><br>usermod -g 组名 用户名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-切换用户\"><a href=\"#3-3-切换用户\" class=\"headerlink\" title=\"3.3 切换用户\"></a>3.3 切换用户</h3><p>介绍：在操作Linux中，如果当前用户的权限不够，可以通过切换到更高权限的用户来执行操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">切换用户</span><br>su 用户名 或者 su - 用户名<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：</p>\n<ol>\n<li>从权限高的用户切到权限低的用户的时候不需要输入密码，反之亦然</li>\n<li>当需要返回到原来的用户时，需要输入exit/logout</li>\n</ol>\n<h3 id=\"3-4-用户组和相关文件\"><a href=\"#3-4-用户组和相关文件\" class=\"headerlink\" title=\"3.4 用户组和相关文件\"></a>3.4 用户组和相关文件</h3><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413215641130.png\" alt=\"image-20220413215641130\"></p>\n<h2 id=\"4-文件目录类\"><a href=\"#4-文件目录类\" class=\"headerlink\" title=\"4.文件目录类\"></a>4.文件目录类</h2><h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><h4 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h4><p>基本语法：pwd（功能描述：显示当前工作目录的绝对路径）</p>\n<h4 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h4><p>基本语法：ls 【选项】【文件或者目录】</p>\n<p>常用选项</p>\n<p>-a 显示当前目录的所有文件和目录，包括隐藏</p>\n<p>-l 以列表的方式显示信息</p>\n<h4 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h4><p>基本语法：cd 【参数】（功能描述：切换到指定目录）</p>\n<p>理解：绝对路径和相对路径</p>\n<p>cd或者cd ~ ：回到自己的家目录</p>\n<p>cd .. 回到当前目录的上一级目录</p>\n<p>案例</p>\n<ol>\n<li>使用绝对路径切换到root目录    cd /root</li>\n<li>使用相对路径到/root目录     cd ../../roor</li>\n<li>回到家目录和上一级目录 cd ~ cd ..</li>\n</ol>\n<h4 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h4><p>基本语法：mkdir 【选项】【要创建的目录】（用于创建目录）</p>\n<p>常用选项：-p（创建多级目录）</p>\n<p>案例</p>\n<ol>\n<li>创建一个目录 /home/dog    mkdir /home/dog</li>\n<li>创建多级目录 /home/animal/tiger  mkdir -p /home/animal/tiger</li>\n</ol>\n<h4 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h4><p>基本语法：rmdir 【选项】【要删除的空目录】（用于删除空目录）</p>\n<p>案例</p>\n<p>删除一个目录 /home/dog     rmdir /home/dog</p>\n<p>细节</p>\n<p>rmdir删除的是空目录，如果目录下有内容时无法删除，但是可以通过 rm -rf 强制删除</p>\n<h4 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h4><p>基本语法：touch 【文件名称】（用于创建空文件）</p>\n<p>案例：创建一个空文件 hello.txt       touch hello.txt</p>\n<h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><p>基本语法：cp 【选项】source dest （用于拷贝文件到指定目录）</p>\n<p>常用选项</p>\n<p>-r 递归复制整个文件夹</p>\n<p>案例</p>\n<ol>\n<li>将home/hello.txt 拷贝到home/bbb目录下</li>\n<li>递归复制整个文件夹，将/home/bbb整个目录，拷贝到/opt</li>\n</ol>\n<p>强制覆盖不提示的方法 /cp</p>\n<h4 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h4><p>mv移动文件或目录或重命名</p>\n<p>基本语法</p>\n<p>mv oldNameFile newNameFile (<strong>在同一目录下是重命名</strong>)</p>\n<p>mv /temp/moveFile /targect    (<strong>不同目录下是移动</strong>)</p>\n<p>案例</p>\n<ol>\n<li>将/home 下的cat.txt重命名为pig.txt    mv cat.txt pig.txt</li>\n<li>将/home下的pig.txt移动到/root     mv pig.txt ../root</li>\n<li>移动整个目录，将sunjunhao移动到/home下 mv sunjunhao ../home</li>\n</ol>\n<h4 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h4><p>查看文件内容</p>\n<p>基本语法：cat 【选项】要查看的内容</p>\n<p>常用选项：-n显示行号</p>\n<p>案例：查看/etc/profile 文件内容并显示行号 cat -n /etc/profile</p>\n<p>细节：cat只能浏览文件，不能修改文件内容，为了浏览方便，一般带上管道命令|more</p>\n<p>cat -n /etc/profile | more </p>\n<h4 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h4><p>more指令是基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文件内容，more指令中内置若干快捷键</p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083303584.png\" alt=\"image-20220420083303584\"></p>\n<p>案例：采用more查看文件    more /etc/profile</p>\n<h4 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h4><p>less在显示文件是根据浏览时加载，不是一次加载完毕，对于浏览大文件很有效</p>\n<p>基本语法：less 要查看的文件</p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083800298.png\" alt=\"image-20220420083800298\"></p>\n<h4 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h4><p>echo 输出内容到控制台</p>\n<p>基本语法：echo 【选项】要输出的内容</p>\n<p>案例：</p>\n<p>使用echo输出环境变量，$PATH $HOSTNAME</p>\n<p>使用echo 输出hello world</p>\n<h4 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h4><p>显示文件内容的开头部分内容</p>\n<p>基本语法</p>\n<p>head 文件（查看前十行内容）</p>\n<p>head -n 5 文件（查看前五行内容 ，5可修改）</p>\n<p>案例：查看/etc/profile前五行内容 head  -n 5 /etc/profile</p>\n<h4 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h4><p>用于输出文件尾部中的内容，默认情况tail显示后十行内容</p>\n<p>基本语法：tail 文件</p>\n<p>tail -n 5 文件</p>\n<p>tail -f 文件 （实时追踪该文档的所有更新）</p>\n<p>案例：</p>\n<p>查看/etc/profile最后五行    tail -n 5 /etc/profile</p>\n<p>实时监控 mydate.txt     tail -f /home/mydate.txt</p>\n<h4 id=\"gt-gt-gt\"><a href=\"#gt-gt-gt\" class=\"headerlink\" title=\"&gt; &gt;&gt;\"></a>&gt; &gt;&gt;</h4><p>“&gt;”输出重定向和”&gt;&gt;”追加</p>\n<p>基本语法</p>\n<ol>\n<li>ls -l &gt;文件 （将列表的内容写入a.txt（覆盖写））</li>\n<li>ls -a &gt;&gt;文件 （列表的内容追加到文件aa.txt末尾）</li>\n<li>cat 文件1 &gt; 文件2（将文件1的内容覆盖到文件2）</li>\n<li>echo 内容&gt;&gt;文件 （追加）</li>\n</ol>\n<p>案例</p>\n<p>将/home 目录下的文件列表写入到/home/info.txt中，覆盖写入    在home目录下 ls -l &gt; info.txt</p>\n<p>将当前日历信息追加到/home/mycal    cal &gt; mycal</p>\n<h4 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h4><p>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p>\n<p>基本语法：ln -s【原文件或目录】【软链接名】（给原文件创建一个软链接）</p>\n<p>案例</p>\n<ol>\n<li>在/home 目录下创建一个软链接myroot 链接到/root目录     ln -s /root /home/myroot</li>\n<li>删除软链接 myroot    rm /home/myroot</li>\n</ol>\n<p>细节</p>\n<p>当使用pwd查看目录是，仍然看到的是软链接所在目录</p>\n<h4 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h4><p>查看已经执行过的历史命令，也可以执行历史命令</p>\n<p>基本语法：history</p>\n<p>案例</p>\n<p>显示所有历史命令 history</p>\n<p>显示最近的10个指令 history 10</p>\n<p>执行编号为5的指令      !5</p>\n<h2 id=\"5-时间日期类\"><a href=\"#5-时间日期类\" class=\"headerlink\" title=\"5.时间日期类\"></a>5.时间日期类</h2><h3 id=\"1-date显示当前日期\"><a href=\"#1-date显示当前日期\" class=\"headerlink\" title=\"1.date显示当前日期\"></a>1.date显示当前日期</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前时间</span><br>date<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前年份</span><br>date +%Y<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前月份</span><br>date +%m<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前是哪一天</span><br>date +%d<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示年月日时分秒</span><br>date +%Y-%d%H:%M:%S<br></code></pre></td></tr></table></figure>\n\n<p>案例    记得加上双引号</p>\n<p>显示当前时间信息 date</p>\n<p>显示当前时间年月日</p>\n<p>date “+%Y-%m-%d”</p>\n<h3 id=\"2-date设置日期\"><a href=\"#2-date设置日期\" class=\"headerlink\" title=\"2.date设置日期\"></a>2.date设置日期</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">date -s 字符串时间<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">案例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置系统当前时间</span><br>date -s &quot;2022-4-20 10:00:00&quot;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-cal指令\"><a href=\"#3-cal指令\" class=\"headerlink\" title=\"3.cal指令\"></a>3.cal指令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看日历指令</span><br>cal<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">基本语法</span><br>cal 【选项】<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">案例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前日历 cal</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示2022年日历 cal 2022</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-搜索查找类\"><a href=\"#6-搜索查找类\" class=\"headerlink\" title=\"6.搜索查找类\"></a>6.搜索查找类</h2><h3 id=\"1-find指令\"><a href=\"#1-find指令\" class=\"headerlink\" title=\"1.find指令\"></a>1.find指令</h3><p>find指令从指定目录向下递归地遍历其各个子目录，将满足条件的文件或目录显示在终端</p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420095550428.png\" alt=\"image-20220420095550428\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">基本语法</span><br>find 【搜索范围】【选项】<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">案例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">按文件名，根据名称查找/home目录下的hello.txt文件</span><br>find /home -name hello.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">按拥有者，查找/opt目录下。用户名为noboby的文件</span><br>find /opt -user nobby<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查找整个Linux系统下大于200M的文件（+n大于 -n小于 n等于，单位k，M，G）</span><br>find / -size +200M<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Linux基础篇\"><a href=\"#Linux基础篇\" class=\"headerlink\" title=\"Linux基础篇\"></a>Linux基础篇</h1><h2 id=\"1-1-vi、vim快速入门\"><a href=\"#1-1-vi、vim快速入门\" class=\"headerlink\" title=\"1.1 vi、vim快速入门\"></a>1.1 vi、vim快速入门</h2><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413100321862.png\" alt=\"image-20220413100321862\"></p>\n<h2 id=\"1-2-vi、vim快捷键\"><a href=\"#1-2-vi、vim快捷键\" class=\"headerlink\" title=\"1.2 vi、vim快捷键\"></a>1.2 vi、vim快捷键</h2><p><strong>[ ]中的内容是提示信息</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">拷贝当前行 光标放置哪一行就拷贝当前行\tyy是复制，p是粘贴\tyyp就是复制当前行并且粘贴，相当于Ctrl+D</span><br>[一般模式] yyp<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">拷贝当前行向下的n行</span><br>[一般模式] n yyp<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">在文件中查找某个单词</span><br>[命令模式] /关键字+回车 n[查找下一个]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置文件的行号</span><br>[命令模式] :set nu<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">取消文件的行号</span><br>[命令模式] :set nonu<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">快速到达文件顶端或末端</span><br>[一般模式] G[末端]<br>[一般模式] gg[顶端]<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">移动光标到某一行\tn代表移动到第n行</span><br>[一般模式] n+shift键+g<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">撤销动作</span><br>[一般模式] u<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-开机、重启和用户登录注销\"><a href=\"#2-开机、重启和用户登录注销\" class=\"headerlink\" title=\"2. 开机、重启和用户登录注销\"></a>2. 开机、重启和用户登录注销</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">立刻进行关机</span><br>shutdown -h now<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">1分钟后关机\t加提示信息，可以提醒到每个登录该终端的用户</span><br>shutdown -h 1<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">现在重启计算机</span><br>shutdown -r now<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">关机</span><br>halt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">现在重启计算机</span><br>reboot<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">把内存中数据同步到磁盘</span><br>sync<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li>不管重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</li>\n<li>目前的shutdown、reboot、halt等命令均已经在关机前进行了sync，但是不确保所有都有，所以建议执行这些命令前先执行sync</li>\n</ol>\n<h3 id=\"2-1-登录注销\"><a href=\"#2-1-登录注销\" class=\"headerlink\" title=\"2.1 登录注销\"></a>2.1 登录注销</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">切换用户</span><br>su 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">注销用户 在提示符下有效</span><br>logout<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong></p>\n<ol>\n<li>logout在图形运行级别无效，在运行级别3下有效</li>\n</ol>\n<h2 id=\"3-用户管理\"><a href=\"#3-用户管理\" class=\"headerlink\" title=\"3. 用户管理\"></a>3. 用户管理</h2><h3 id=\"3-1-添加、删除和查看用户\"><a href=\"#3-1-添加、删除和查看用户\" class=\"headerlink\" title=\"3.1 添加、删除和查看用户\"></a>3.1 添加、删除和查看用户</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加用户 添加用户后会产生一个和用户名同名的家目录</span><br>useradd 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">添加用户 给新用户指定家目录</span><br>useradd -d 目录 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改密码</span><br>passwd 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除用户 保留家目录</span><br>userdel 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除用户和家目录</span><br>userdel -r 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看指定用户信息</span><br>id 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看当前用户/登录用户</span><br>who am i 或者 whoami 或者 who<br></code></pre></td></tr></table></figure>\n\n<p> <strong>一般情况建议保留家目录</strong> </p>\n<h3 id=\"3-2-用户组\"><a href=\"#3-2-用户组\" class=\"headerlink\" title=\"3.2 用户组\"></a>3.2 用户组</h3><p>介绍：类似于角色，系统可以对有共性/权限的多个用户进行同一管理</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建用户组</span><br>groupadd 组名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">删除用户组</span><br>groupdel 组名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建用户并指定到用户组</span><br>useradd -g 组名 用户名<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改用户的组</span><br>usermod -g 组名 用户名<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-切换用户\"><a href=\"#3-3-切换用户\" class=\"headerlink\" title=\"3.3 切换用户\"></a>3.3 切换用户</h3><p>介绍：在操作Linux中，如果当前用户的权限不够，可以通过切换到更高权限的用户来执行操作</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">切换用户</span><br>su 用户名 或者 su - 用户名<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意</strong>：</p>\n<ol>\n<li>从权限高的用户切到权限低的用户的时候不需要输入密码，反之亦然</li>\n<li>当需要返回到原来的用户时，需要输入exit/logout</li>\n</ol>\n<h3 id=\"3-4-用户组和相关文件\"><a href=\"#3-4-用户组和相关文件\" class=\"headerlink\" title=\"3.4 用户组和相关文件\"></a>3.4 用户组和相关文件</h3><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413215641130.png\" alt=\"image-20220413215641130\"></p>\n<h2 id=\"4-文件目录类\"><a href=\"#4-文件目录类\" class=\"headerlink\" title=\"4.文件目录类\"></a>4.文件目录类</h2><h3 id=\"指令\"><a href=\"#指令\" class=\"headerlink\" title=\"指令\"></a>指令</h3><h4 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h4><p>基本语法：pwd（功能描述：显示当前工作目录的绝对路径）</p>\n<h4 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h4><p>基本语法：ls 【选项】【文件或者目录】</p>\n<p>常用选项</p>\n<p>-a 显示当前目录的所有文件和目录，包括隐藏</p>\n<p>-l 以列表的方式显示信息</p>\n<h4 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h4><p>基本语法：cd 【参数】（功能描述：切换到指定目录）</p>\n<p>理解：绝对路径和相对路径</p>\n<p>cd或者cd ~ ：回到自己的家目录</p>\n<p>cd .. 回到当前目录的上一级目录</p>\n<p>案例</p>\n<ol>\n<li>使用绝对路径切换到root目录    cd /root</li>\n<li>使用相对路径到/root目录     cd ../../roor</li>\n<li>回到家目录和上一级目录 cd ~ cd ..</li>\n</ol>\n<h4 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h4><p>基本语法：mkdir 【选项】【要创建的目录】（用于创建目录）</p>\n<p>常用选项：-p（创建多级目录）</p>\n<p>案例</p>\n<ol>\n<li>创建一个目录 /home/dog    mkdir /home/dog</li>\n<li>创建多级目录 /home/animal/tiger  mkdir -p /home/animal/tiger</li>\n</ol>\n<h4 id=\"rmdir\"><a href=\"#rmdir\" class=\"headerlink\" title=\"rmdir\"></a>rmdir</h4><p>基本语法：rmdir 【选项】【要删除的空目录】（用于删除空目录）</p>\n<p>案例</p>\n<p>删除一个目录 /home/dog     rmdir /home/dog</p>\n<p>细节</p>\n<p>rmdir删除的是空目录，如果目录下有内容时无法删除，但是可以通过 rm -rf 强制删除</p>\n<h4 id=\"touch\"><a href=\"#touch\" class=\"headerlink\" title=\"touch\"></a>touch</h4><p>基本语法：touch 【文件名称】（用于创建空文件）</p>\n<p>案例：创建一个空文件 hello.txt       touch hello.txt</p>\n<h4 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h4><p>基本语法：cp 【选项】source dest （用于拷贝文件到指定目录）</p>\n<p>常用选项</p>\n<p>-r 递归复制整个文件夹</p>\n<p>案例</p>\n<ol>\n<li>将home/hello.txt 拷贝到home/bbb目录下</li>\n<li>递归复制整个文件夹，将/home/bbb整个目录，拷贝到/opt</li>\n</ol>\n<p>强制覆盖不提示的方法 /cp</p>\n<h4 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h4><p>mv移动文件或目录或重命名</p>\n<p>基本语法</p>\n<p>mv oldNameFile newNameFile (<strong>在同一目录下是重命名</strong>)</p>\n<p>mv /temp/moveFile /targect    (<strong>不同目录下是移动</strong>)</p>\n<p>案例</p>\n<ol>\n<li>将/home 下的cat.txt重命名为pig.txt    mv cat.txt pig.txt</li>\n<li>将/home下的pig.txt移动到/root     mv pig.txt ../root</li>\n<li>移动整个目录，将sunjunhao移动到/home下 mv sunjunhao ../home</li>\n</ol>\n<h4 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h4><p>查看文件内容</p>\n<p>基本语法：cat 【选项】要查看的内容</p>\n<p>常用选项：-n显示行号</p>\n<p>案例：查看/etc/profile 文件内容并显示行号 cat -n /etc/profile</p>\n<p>细节：cat只能浏览文件，不能修改文件内容，为了浏览方便，一般带上管道命令|more</p>\n<p>cat -n /etc/profile | more </p>\n<h4 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h4><p>more指令是基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文件内容，more指令中内置若干快捷键</p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083303584.png\" alt=\"image-20220420083303584\"></p>\n<p>案例：采用more查看文件    more /etc/profile</p>\n<h4 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h4><p>less在显示文件是根据浏览时加载，不是一次加载完毕，对于浏览大文件很有效</p>\n<p>基本语法：less 要查看的文件</p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083800298.png\" alt=\"image-20220420083800298\"></p>\n<h4 id=\"echo\"><a href=\"#echo\" class=\"headerlink\" title=\"echo\"></a>echo</h4><p>echo 输出内容到控制台</p>\n<p>基本语法：echo 【选项】要输出的内容</p>\n<p>案例：</p>\n<p>使用echo输出环境变量，$PATH $HOSTNAME</p>\n<p>使用echo 输出hello world</p>\n<h4 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h4><p>显示文件内容的开头部分内容</p>\n<p>基本语法</p>\n<p>head 文件（查看前十行内容）</p>\n<p>head -n 5 文件（查看前五行内容 ，5可修改）</p>\n<p>案例：查看/etc/profile前五行内容 head  -n 5 /etc/profile</p>\n<h4 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h4><p>用于输出文件尾部中的内容，默认情况tail显示后十行内容</p>\n<p>基本语法：tail 文件</p>\n<p>tail -n 5 文件</p>\n<p>tail -f 文件 （实时追踪该文档的所有更新）</p>\n<p>案例：</p>\n<p>查看/etc/profile最后五行    tail -n 5 /etc/profile</p>\n<p>实时监控 mydate.txt     tail -f /home/mydate.txt</p>\n<h4 id=\"gt-gt-gt\"><a href=\"#gt-gt-gt\" class=\"headerlink\" title=\"&gt; &gt;&gt;\"></a>&gt; &gt;&gt;</h4><p>“&gt;”输出重定向和”&gt;&gt;”追加</p>\n<p>基本语法</p>\n<ol>\n<li>ls -l &gt;文件 （将列表的内容写入a.txt（覆盖写））</li>\n<li>ls -a &gt;&gt;文件 （列表的内容追加到文件aa.txt末尾）</li>\n<li>cat 文件1 &gt; 文件2（将文件1的内容覆盖到文件2）</li>\n<li>echo 内容&gt;&gt;文件 （追加）</li>\n</ol>\n<p>案例</p>\n<p>将/home 目录下的文件列表写入到/home/info.txt中，覆盖写入    在home目录下 ls -l &gt; info.txt</p>\n<p>将当前日历信息追加到/home/mycal    cal &gt; mycal</p>\n<h4 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h4><p>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p>\n<p>基本语法：ln -s【原文件或目录】【软链接名】（给原文件创建一个软链接）</p>\n<p>案例</p>\n<ol>\n<li>在/home 目录下创建一个软链接myroot 链接到/root目录     ln -s /root /home/myroot</li>\n<li>删除软链接 myroot    rm /home/myroot</li>\n</ol>\n<p>细节</p>\n<p>当使用pwd查看目录是，仍然看到的是软链接所在目录</p>\n<h4 id=\"history\"><a href=\"#history\" class=\"headerlink\" title=\"history\"></a>history</h4><p>查看已经执行过的历史命令，也可以执行历史命令</p>\n<p>基本语法：history</p>\n<p>案例</p>\n<p>显示所有历史命令 history</p>\n<p>显示最近的10个指令 history 10</p>\n<p>执行编号为5的指令      !5</p>\n<h2 id=\"5-时间日期类\"><a href=\"#5-时间日期类\" class=\"headerlink\" title=\"5.时间日期类\"></a>5.时间日期类</h2><h3 id=\"1-date显示当前日期\"><a href=\"#1-date显示当前日期\" class=\"headerlink\" title=\"1.date显示当前日期\"></a>1.date显示当前日期</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前时间</span><br>date<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前年份</span><br>date +%Y<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前月份</span><br>date +%m<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前是哪一天</span><br>date +%d<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示年月日时分秒</span><br>date +%Y-%d%H:%M:%S<br></code></pre></td></tr></table></figure>\n\n<p>案例    记得加上双引号</p>\n<p>显示当前时间信息 date</p>\n<p>显示当前时间年月日</p>\n<p>date “+%Y-%m-%d”</p>\n<h3 id=\"2-date设置日期\"><a href=\"#2-date设置日期\" class=\"headerlink\" title=\"2.date设置日期\"></a>2.date设置日期</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">date -s 字符串时间<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">案例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">设置系统当前时间</span><br>date -s &quot;2022-4-20 10:00:00&quot;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-cal指令\"><a href=\"#3-cal指令\" class=\"headerlink\" title=\"3.cal指令\"></a>3.cal指令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查看日历指令</span><br>cal<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">基本语法</span><br>cal 【选项】<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">案例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示当前日历 cal</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">显示2022年日历 cal 2022</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-搜索查找类\"><a href=\"#6-搜索查找类\" class=\"headerlink\" title=\"6.搜索查找类\"></a>6.搜索查找类</h2><h3 id=\"1-find指令\"><a href=\"#1-find指令\" class=\"headerlink\" title=\"1.find指令\"></a>1.find指令</h3><p>find指令从指定目录向下递归地遍历其各个子目录，将满足条件的文件或目录显示在终端</p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420095550428.png\" alt=\"image-20220420095550428\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">基本语法</span><br>find 【搜索范围】【选项】<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">案例</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">按文件名，根据名称查找/home目录下的hello.txt文件</span><br>find /home -name hello.txt<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">按拥有者，查找/opt目录下。用户名为noboby的文件</span><br>find /opt -user nobby<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">查找整个Linux系统下大于200M的文件（+n大于 -n小于 n等于，单位k，M，G）</span><br>find / -size +200M<br></code></pre></td></tr></table></figure>\n\n\n\n<hr>\n"},{"_content":"# :star:Java集合的回顾（集合的排序）\n\n![image-20220320100249565](D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320100249565.png)\n\n## :one:Set\n\n### **Set集合特点**\n\n- 不包含重复元素的集合\n\n- 没有带索引的方法，所以不能使用普通for循环遍历\n\n  \n\n### TreeSet\n\n#### 特点\n\n- **元素有序**：这里的有序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体的排序取决于构造方法\n\n  - TreeSet():根据元素的自然排序进行排序（**数字从小到大**）\n\n  - TrssSet(Comparator comparator):根据指定的比较器进行排序\n\n    \n\n- 包含set集合的特点\n\n\n\n#### 元素有序且不重复\n\n```java\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        Set set = new TreeSet();\n        set.add(1);\n        set.add(1);\n        set.add(5);\n        set.add(3);\n        for(Object o:set) {\n            System.out.println(o);\n        }\n    }\n}\n\noutput:1 3 5\n```\n\n#### 比较器排序\n\n##### **:rocket:从小到大排序-分析比较过程**\n\n起始情况下：s1和s2都被赋值为集合添加的第一个值，也就是5\t5\n\n第二次添加：**s1(新元素)**,**s2(已经添加的元素)**,s1-s2<0,s1的位置和s2的位置**不进行交换**\t2 5\n\n第三次添加：s1和第一次添加的元素比较，s1-s2<0,不交换，再和第二次添加的元素比较，s1-s2==0不添加\t2 5\n\n第四次添加：1-5<0 不交换，1-2<0不交换，1 2 5\n\n(规律)第五次添加：3-5<0 不交换，3-2>0交换（由于已经有序，2大于1,3和2交换，2前面的就不用再比较了），1 2 3 5\n\n(事实上)：3-2>0放到2的后面，3-5<0放5的前面\n\n**(按规律)**第六次添加：8-5>0 放5后面，结束\t1 2 3  5 8\n\n**(事实上)**：8-2>0放2后面，8-5>0放5后面\t结束\t1 2 3 5 8\n\n###### :exclamation:注意\n\n- 上面是模拟运行的过程，这是通过debug分析执行过程的出的过程，但是第五次和第六次添加的时候却出现了和前几次不同的情况，这一点我还在困惑中，不过我感觉**可能和在元素在空间中存放的位置**（地址有关）。至于为什么说是前几次形成的规律，是为了便于自己记忆比较的过程。\n\n- 比较过程的描述用**交换**我觉得可能不太准确，因为在比较的过程中，并不能确定s1添加进去和s2比较的相对位置，所以按照从小到大（从左到右）的描述，我觉得用**放前面放后面**相对准确一些，也就是s1-s2>0放到s2的后面；s1-s2<0就放在s2的前面（s1-s2==0也放前面）**望周知**。\n\n```java\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        //通过比较器排序Comparator自定义排序方式\n        Set<Integer> set = new TreeSet<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer s1, Integer s2) {\n                return s1-s2;\n            }\n        });\n        set.add(5);\n        set.add(2);\n        set.add(2);\n        set.add(1);\n        set.add(3);\n        set.add(8);\n        for(Object o:set) {\n            System.out.println(o);\n        }\n    }\n}\n```\n\n###### 贴上运行完的截图\n\n![image-20220320111034431](D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320111034431.png)\n\n\n\n##### :robot:从大到小排序\n\n起始：s2和s1都被赋值为第一个被添加的值5\t5\n\n第二次添加：s2(已经添加过的元素)-s1(新元素)>0，2放5的后面\t5 2\n\n第三次添加：5-2>0，放5后面，2-2==0，不添加\t5 2\n\n第四次添加：5-1>0，放5后面，2-1>0放2后面\t5 2 1\n\n第五次添加：2-3<0，放2前面，5-3>0放5后面\t5 3 2 1\n\n第六次添加：2-8<0，放2前面，5-8<0放5前面 \t8 5 3 2 1\n\n**需要注意的和从小到大类似，不再赘述**\n\n```java\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        //通过比较器排序Comparator自定义排序方式\n        Set<Integer> set = new TreeSet<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer s1, Integer s2) {\n                return s2-s1;\n            }\n        });\n        set.add(5);\n        set.add(2);\n        set.add(2);\n        set.add(1);\n        set.add(3);\n        set.add(8);\n        for(Object o:set) {\n            System.out.println(o);\n        }\n    }\n}\n```\n\n#### :end:总结\n\n匿名类的方式\n\ns1:新添加元素\ts2:已经添加过的元素\n\n实现接口的方式\n\nthis. 新添加的元素\ts:已经添加的元素\n\n##### 从小到大排序\n\n格式：s1-s2\n\n> s1-s2=num\tnum>0\ts1放在s2的后面\n>\n> ​\t\t\t\t\t\tnum<0\ts1放在s2的前面\n>\n> ​\t\t\t\t\t\tnum==0\ts1不添加\n\n​\t\t\t\t\t\n\n##### 从大到小排序\n\n> s2-s1=num\tnum>0\ts1放在s2的后面\n>\n> ​\t\t\t\t\t\tnum<0\ts1放在s2的前面\n>\n> ​\t\t\t\t\t\tnum==0\ts1不添加\n\n**s1在前降序排列，s1在后升序排列**\n\n### 处理多重条件排序\n\n```java\npackage com.reback;\n\nimport java.util.*;\n\n/**\n * @Author Lunau\n * @Create 2022-03-20 10:00\n * @Description 对set集合及其实现类探究\n * @Result\t\n杜甫 2013 21\n李贺 2014 25\n李白 2014 20\n王维 2015 22\n */\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        //通过比较器排序Comparator自定义排序方式\n        Set<Student> set = new TreeSet<Student>(new Comparator<Student>() {\n            @Override\n            public int compare(Student s1, Student s2) {\n                //按照id从小到大，age从大到小排序\n                int num1 = s1.id-s2.id;\n                int num2 = num1==0?s2.age-s1.age:num1;\n                return num2;\n            }\n        });\n        //添加元素\n        set.add(new Student(2014,20,\"李白\"));\n        set.add(new Student(2013,21,\"杜甫\"));\n        set.add(new Student(2015,22,\"王维\"));\n        set.add(new Student(2014,25,\"李贺\"));\n        for(Student s:set) {\n            System.out.println(s.name+\" \"+s.id+\" \"+s.age);\n        }\n    }\n}\nclass Student{\n    int id;\n    int age;\n    String name;\n\n    public Student(int id, int age, String name) {\n        this.id = id;\n        this.age = age;\n        this.name = name;\n    }\n}\n```\n\n## :two:List\n\n### 2.1 List集合子类特点\n\n**ArrayList**：底层数据结构是数组，查询快，增删慢\n\n**LinkedList**：底层数据结构是链表，查询慢，增删快\n\n### 2.2 List集合排序方法\n\n以ArrayList实现类为例\n\n由于比较器排序的过程和Set集合排序的方法相同，但是需要知道的是，**Set集合的排序可以直接在创建Set集合的时候进行比较器排序**（通过创建比较器new Comparator）,而**List列表需要用Collections里的sort方法进行排序**。\n\n**:star:但是排序比较器的构造是一致的，只是排序的方法不一样**\n\n```java\npackage com.reback;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * @Author Lunau\n * @Create 2022-03-20 12:57\n * @Description 关于list排序探究\n * @Result\n */\npublic class AboutList {\n    public static void main(String[] args) {\n        //创建list集合对象    以LikeList为例\n        List<Student> list = new LinkedList<>();\n\n          //添加元素到集合\n        list.add(new Student(2014,20,\"李白\"));\n        list.add(new Student(2013,21,\"杜甫\"));\n        list.add(new Student(2015,22,\"王维\"));\n        list.add(new Student(2014,25,\"李贺\"));\n        //采用\n        Collections.sort(list, new Comparator<Student>() {\n            @Override\n            public int compare(Student s1, Student s2) {\n                //按照id从小到大，age从大到小排序\n                int num1 = s1.id-s2.id;\n                int num2 = num1==0?s2.age-s1.age:num1;\n                return num2;\n            }\n        });\n        //打印集合\n        for(Student s:list) {\n            System.out.println(s.name+\" \"+s.id+\" \"+s.age);\n        }\n    }\n}\n```\n\n## :three: 容易混淆的\n\n### Collection和Collections的区别\n\nCollection：是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供最大化的统一操作方式。\n\nCollections：是一个包装类。它包含各种有关[集合](https://so.csdn.net/so/search?q=集合&spm=1001.2101.3001.7020)操作的**静态多态方法**。此类**不能实例化**，就像一个工具类，服务于Java的Collection框架。\n\n简单理解：Collection是**定义集合**的，实现集合；Collections是**管理集合**，用来对集合进行**操作**的，比如排序、反转等操作。\n\n### Comparator比较器\n\n该比较器中提供了许多方法，需要终点记忆的是compara()方法，在自定义排序规则的时候就要用对该方法进行重写，\n\n重写的规则前面已经探讨过了。\n\n# :point_right:总结\n\n写这篇总结的起因是在写蓝桥杯真题利用List列表排序时，发现过去学习的知识忘记了好多，之前一直用的Set的比较器排序（comparator）比较多，突然让用列表进行比较器排序，发现和自己想的并不是那么一回事，列表排序的方法和set有些不同，查阅一些其他人的博客，加上自己的一些debug，总结出一点能用的知识。\n\n","source":"_posts/Java集合的回顾（集合的排序）.md","raw":"# :star:Java集合的回顾（集合的排序）\n\n![image-20220320100249565](D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320100249565.png)\n\n## :one:Set\n\n### **Set集合特点**\n\n- 不包含重复元素的集合\n\n- 没有带索引的方法，所以不能使用普通for循环遍历\n\n  \n\n### TreeSet\n\n#### 特点\n\n- **元素有序**：这里的有序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体的排序取决于构造方法\n\n  - TreeSet():根据元素的自然排序进行排序（**数字从小到大**）\n\n  - TrssSet(Comparator comparator):根据指定的比较器进行排序\n\n    \n\n- 包含set集合的特点\n\n\n\n#### 元素有序且不重复\n\n```java\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        Set set = new TreeSet();\n        set.add(1);\n        set.add(1);\n        set.add(5);\n        set.add(3);\n        for(Object o:set) {\n            System.out.println(o);\n        }\n    }\n}\n\noutput:1 3 5\n```\n\n#### 比较器排序\n\n##### **:rocket:从小到大排序-分析比较过程**\n\n起始情况下：s1和s2都被赋值为集合添加的第一个值，也就是5\t5\n\n第二次添加：**s1(新元素)**,**s2(已经添加的元素)**,s1-s2<0,s1的位置和s2的位置**不进行交换**\t2 5\n\n第三次添加：s1和第一次添加的元素比较，s1-s2<0,不交换，再和第二次添加的元素比较，s1-s2==0不添加\t2 5\n\n第四次添加：1-5<0 不交换，1-2<0不交换，1 2 5\n\n(规律)第五次添加：3-5<0 不交换，3-2>0交换（由于已经有序，2大于1,3和2交换，2前面的就不用再比较了），1 2 3 5\n\n(事实上)：3-2>0放到2的后面，3-5<0放5的前面\n\n**(按规律)**第六次添加：8-5>0 放5后面，结束\t1 2 3  5 8\n\n**(事实上)**：8-2>0放2后面，8-5>0放5后面\t结束\t1 2 3 5 8\n\n###### :exclamation:注意\n\n- 上面是模拟运行的过程，这是通过debug分析执行过程的出的过程，但是第五次和第六次添加的时候却出现了和前几次不同的情况，这一点我还在困惑中，不过我感觉**可能和在元素在空间中存放的位置**（地址有关）。至于为什么说是前几次形成的规律，是为了便于自己记忆比较的过程。\n\n- 比较过程的描述用**交换**我觉得可能不太准确，因为在比较的过程中，并不能确定s1添加进去和s2比较的相对位置，所以按照从小到大（从左到右）的描述，我觉得用**放前面放后面**相对准确一些，也就是s1-s2>0放到s2的后面；s1-s2<0就放在s2的前面（s1-s2==0也放前面）**望周知**。\n\n```java\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        //通过比较器排序Comparator自定义排序方式\n        Set<Integer> set = new TreeSet<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer s1, Integer s2) {\n                return s1-s2;\n            }\n        });\n        set.add(5);\n        set.add(2);\n        set.add(2);\n        set.add(1);\n        set.add(3);\n        set.add(8);\n        for(Object o:set) {\n            System.out.println(o);\n        }\n    }\n}\n```\n\n###### 贴上运行完的截图\n\n![image-20220320111034431](D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320111034431.png)\n\n\n\n##### :robot:从大到小排序\n\n起始：s2和s1都被赋值为第一个被添加的值5\t5\n\n第二次添加：s2(已经添加过的元素)-s1(新元素)>0，2放5的后面\t5 2\n\n第三次添加：5-2>0，放5后面，2-2==0，不添加\t5 2\n\n第四次添加：5-1>0，放5后面，2-1>0放2后面\t5 2 1\n\n第五次添加：2-3<0，放2前面，5-3>0放5后面\t5 3 2 1\n\n第六次添加：2-8<0，放2前面，5-8<0放5前面 \t8 5 3 2 1\n\n**需要注意的和从小到大类似，不再赘述**\n\n```java\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        //通过比较器排序Comparator自定义排序方式\n        Set<Integer> set = new TreeSet<>(new Comparator<Integer>() {\n            @Override\n            public int compare(Integer s1, Integer s2) {\n                return s2-s1;\n            }\n        });\n        set.add(5);\n        set.add(2);\n        set.add(2);\n        set.add(1);\n        set.add(3);\n        set.add(8);\n        for(Object o:set) {\n            System.out.println(o);\n        }\n    }\n}\n```\n\n#### :end:总结\n\n匿名类的方式\n\ns1:新添加元素\ts2:已经添加过的元素\n\n实现接口的方式\n\nthis. 新添加的元素\ts:已经添加的元素\n\n##### 从小到大排序\n\n格式：s1-s2\n\n> s1-s2=num\tnum>0\ts1放在s2的后面\n>\n> ​\t\t\t\t\t\tnum<0\ts1放在s2的前面\n>\n> ​\t\t\t\t\t\tnum==0\ts1不添加\n\n​\t\t\t\t\t\n\n##### 从大到小排序\n\n> s2-s1=num\tnum>0\ts1放在s2的后面\n>\n> ​\t\t\t\t\t\tnum<0\ts1放在s2的前面\n>\n> ​\t\t\t\t\t\tnum==0\ts1不添加\n\n**s1在前降序排列，s1在后升序排列**\n\n### 处理多重条件排序\n\n```java\npackage com.reback;\n\nimport java.util.*;\n\n/**\n * @Author Lunau\n * @Create 2022-03-20 10:00\n * @Description 对set集合及其实现类探究\n * @Result\t\n杜甫 2013 21\n李贺 2014 25\n李白 2014 20\n王维 2015 22\n */\npublic class AboutSet {\n    public static void main(String[] args) {\n        //创建set集合\n        //通过比较器排序Comparator自定义排序方式\n        Set<Student> set = new TreeSet<Student>(new Comparator<Student>() {\n            @Override\n            public int compare(Student s1, Student s2) {\n                //按照id从小到大，age从大到小排序\n                int num1 = s1.id-s2.id;\n                int num2 = num1==0?s2.age-s1.age:num1;\n                return num2;\n            }\n        });\n        //添加元素\n        set.add(new Student(2014,20,\"李白\"));\n        set.add(new Student(2013,21,\"杜甫\"));\n        set.add(new Student(2015,22,\"王维\"));\n        set.add(new Student(2014,25,\"李贺\"));\n        for(Student s:set) {\n            System.out.println(s.name+\" \"+s.id+\" \"+s.age);\n        }\n    }\n}\nclass Student{\n    int id;\n    int age;\n    String name;\n\n    public Student(int id, int age, String name) {\n        this.id = id;\n        this.age = age;\n        this.name = name;\n    }\n}\n```\n\n## :two:List\n\n### 2.1 List集合子类特点\n\n**ArrayList**：底层数据结构是数组，查询快，增删慢\n\n**LinkedList**：底层数据结构是链表，查询慢，增删快\n\n### 2.2 List集合排序方法\n\n以ArrayList实现类为例\n\n由于比较器排序的过程和Set集合排序的方法相同，但是需要知道的是，**Set集合的排序可以直接在创建Set集合的时候进行比较器排序**（通过创建比较器new Comparator）,而**List列表需要用Collections里的sort方法进行排序**。\n\n**:star:但是排序比较器的构造是一致的，只是排序的方法不一样**\n\n```java\npackage com.reback;\n\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.LinkedList;\nimport java.util.List;\n\n/**\n * @Author Lunau\n * @Create 2022-03-20 12:57\n * @Description 关于list排序探究\n * @Result\n */\npublic class AboutList {\n    public static void main(String[] args) {\n        //创建list集合对象    以LikeList为例\n        List<Student> list = new LinkedList<>();\n\n          //添加元素到集合\n        list.add(new Student(2014,20,\"李白\"));\n        list.add(new Student(2013,21,\"杜甫\"));\n        list.add(new Student(2015,22,\"王维\"));\n        list.add(new Student(2014,25,\"李贺\"));\n        //采用\n        Collections.sort(list, new Comparator<Student>() {\n            @Override\n            public int compare(Student s1, Student s2) {\n                //按照id从小到大，age从大到小排序\n                int num1 = s1.id-s2.id;\n                int num2 = num1==0?s2.age-s1.age:num1;\n                return num2;\n            }\n        });\n        //打印集合\n        for(Student s:list) {\n            System.out.println(s.name+\" \"+s.id+\" \"+s.age);\n        }\n    }\n}\n```\n\n## :three: 容易混淆的\n\n### Collection和Collections的区别\n\nCollection：是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供最大化的统一操作方式。\n\nCollections：是一个包装类。它包含各种有关[集合](https://so.csdn.net/so/search?q=集合&spm=1001.2101.3001.7020)操作的**静态多态方法**。此类**不能实例化**，就像一个工具类，服务于Java的Collection框架。\n\n简单理解：Collection是**定义集合**的，实现集合；Collections是**管理集合**，用来对集合进行**操作**的，比如排序、反转等操作。\n\n### Comparator比较器\n\n该比较器中提供了许多方法，需要终点记忆的是compara()方法，在自定义排序规则的时候就要用对该方法进行重写，\n\n重写的规则前面已经探讨过了。\n\n# :point_right:总结\n\n写这篇总结的起因是在写蓝桥杯真题利用List列表排序时，发现过去学习的知识忘记了好多，之前一直用的Set的比较器排序（comparator）比较多，突然让用列表进行比较器排序，发现和自己想的并不是那么一回事，列表排序的方法和set有些不同，查阅一些其他人的博客，加上自己的一些debug，总结出一点能用的知识。\n\n","slug":"Java集合的回顾（集合的排序）","published":1,"date":"2022-09-21T03:19:07.040Z","updated":"2022-03-20T08:15:57.207Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8av0003mkg7cyv48fa4","content":"<h1 id=\"star-Java集合的回顾（集合的排序）\"><a href=\"#star-Java集合的回顾（集合的排序）\" class=\"headerlink\" title=\":star:Java集合的回顾（集合的排序）\"></a>:star:Java集合的回顾（集合的排序）</h1><p><img src=\"D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320100249565.png\" alt=\"image-20220320100249565\"></p>\n<h2 id=\"one-Set\"><a href=\"#one-Set\" class=\"headerlink\" title=\":one:Set\"></a>:one:Set</h2><h3 id=\"Set集合特点\"><a href=\"#Set集合特点\" class=\"headerlink\" title=\"Set集合特点\"></a><strong>Set集合特点</strong></h3><ul>\n<li><p>不包含重复元素的集合</p>\n</li>\n<li><p>没有带索引的方法，所以不能使用普通for循环遍历</p>\n</li>\n</ul>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><p><strong>元素有序</strong>：这里的有序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体的排序取决于构造方法</p>\n<ul>\n<li><p>TreeSet():根据元素的自然排序进行排序（<strong>数字从小到大</strong>）</p>\n</li>\n<li><p>TrssSet(Comparator comparator):根据指定的比较器进行排序</p>\n</li>\n</ul>\n</li>\n<li><p>包含set集合的特点</p>\n</li>\n</ul>\n<h4 id=\"元素有序且不重复\"><a href=\"#元素有序且不重复\" class=\"headerlink\" title=\"元素有序且不重复\"></a>元素有序且不重复</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-type\">Set</span> <span class=\"hljs-variable\">set</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>();<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">5</span>);<br>        set.add(<span class=\"hljs-number\">3</span>);<br>        <span class=\"hljs-keyword\">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br><br>output:<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"比较器排序\"><a href=\"#比较器排序\" class=\"headerlink\" title=\"比较器排序\"></a>比较器排序</h4><h5 id=\"rocket-从小到大排序-分析比较过程\"><a href=\"#rocket-从小到大排序-分析比较过程\" class=\"headerlink\" title=\":rocket:从小到大排序-分析比较过程\"></a><strong>:rocket:从小到大排序-分析比较过程</strong></h5><p>起始情况下：s1和s2都被赋值为集合添加的第一个值，也就是5    5</p>\n<p>第二次添加：<strong>s1(新元素)</strong>,<strong>s2(已经添加的元素)</strong>,s1-s2&lt;0,s1的位置和s2的位置<strong>不进行交换</strong>    2 5</p>\n<p>第三次添加：s1和第一次添加的元素比较，s1-s2&lt;0,不交换，再和第二次添加的元素比较，s1-s2==0不添加    2 5</p>\n<p>第四次添加：1-5&lt;0 不交换，1-2&lt;0不交换，1 2 5</p>\n<p>(规律)第五次添加：3-5&lt;0 不交换，3-2&gt;0交换（由于已经有序，2大于1,3和2交换，2前面的就不用再比较了），1 2 3 5</p>\n<p>(事实上)：3-2&gt;0放到2的后面，3-5&lt;0放5的前面</p>\n<p>**(按规律)**第六次添加：8-5&gt;0 放5后面，结束    1 2 3  5 8</p>\n<p>**(事实上)**：8-2&gt;0放2后面，8-5&gt;0放5后面    结束    1 2 3 5 8</p>\n<h6 id=\"exclamation-注意\"><a href=\"#exclamation-注意\" class=\"headerlink\" title=\":exclamation:注意\"></a>:exclamation:注意</h6><ul>\n<li><p>上面是模拟运行的过程，这是通过debug分析执行过程的出的过程，但是第五次和第六次添加的时候却出现了和前几次不同的情况，这一点我还在困惑中，不过我感觉<strong>可能和在元素在空间中存放的位置</strong>（地址有关）。至于为什么说是前几次形成的规律，是为了便于自己记忆比较的过程。</p>\n</li>\n<li><p>比较过程的描述用<strong>交换</strong>我觉得可能不太准确，因为在比较的过程中，并不能确定s1添加进去和s2比较的相对位置，所以按照从小到大（从左到右）的描述，我觉得用<strong>放前面放后面</strong>相对准确一些，也就是s1-s2&gt;0放到s2的后面；s1-s2&lt;0就放在s2的前面（s1-s2==0也放前面）<strong>望周知</strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-comment\">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Integer s1, Integer s2)</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> s1-s2;<br>            &#125;<br>        &#125;);<br>        set.add(<span class=\"hljs-number\">5</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">3</span>);<br>        set.add(<span class=\"hljs-number\">8</span>);<br>        <span class=\"hljs-keyword\">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"贴上运行完的截图\"><a href=\"#贴上运行完的截图\" class=\"headerlink\" title=\"贴上运行完的截图\"></a>贴上运行完的截图</h6><p><img src=\"D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320111034431.png\" alt=\"image-20220320111034431\"></p>\n<h5 id=\"robot-从大到小排序\"><a href=\"#robot-从大到小排序\" class=\"headerlink\" title=\":robot:从大到小排序\"></a>:robot:从大到小排序</h5><p>起始：s2和s1都被赋值为第一个被添加的值5    5</p>\n<p>第二次添加：s2(已经添加过的元素)-s1(新元素)&gt;0，2放5的后面    5 2</p>\n<p>第三次添加：5-2&gt;0，放5后面，2-2==0，不添加    5 2</p>\n<p>第四次添加：5-1&gt;0，放5后面，2-1&gt;0放2后面    5 2 1</p>\n<p>第五次添加：2-3&lt;0，放2前面，5-3&gt;0放5后面    5 3 2 1</p>\n<p>第六次添加：2-8&lt;0，放2前面，5-8&lt;0放5前面     8 5 3 2 1</p>\n<p><strong>需要注意的和从小到大类似，不再赘述</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-comment\">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Integer s1, Integer s2)</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> s2-s1;<br>            &#125;<br>        &#125;);<br>        set.add(<span class=\"hljs-number\">5</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">3</span>);<br>        set.add(<span class=\"hljs-number\">8</span>);<br>        <span class=\"hljs-keyword\">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"end-总结\"><a href=\"#end-总结\" class=\"headerlink\" title=\":end:总结\"></a>:end:总结</h4><p>匿名类的方式</p>\n<p>s1:新添加元素    s2:已经添加过的元素</p>\n<p>实现接口的方式</p>\n<p>this. 新添加的元素    s:已经添加的元素</p>\n<h5 id=\"从小到大排序\"><a href=\"#从小到大排序\" class=\"headerlink\" title=\"从小到大排序\"></a>从小到大排序</h5><p>格式：s1-s2</p>\n<blockquote>\n<p>s1-s2=num    num&gt;0    s1放在s2的后面</p>\n<p>​                        num&lt;0    s1放在s2的前面</p>\n<p>​                        num==0    s1不添加</p>\n</blockquote>\n<p>​                    </p>\n<h5 id=\"从大到小排序\"><a href=\"#从大到小排序\" class=\"headerlink\" title=\"从大到小排序\"></a>从大到小排序</h5><blockquote>\n<p>s2-s1=num    num&gt;0    s1放在s2的后面</p>\n<p>​                        num&lt;0    s1放在s2的前面</p>\n<p>​                        num==0    s1不添加</p>\n</blockquote>\n<p><strong>s1在前降序排列，s1在后升序排列</strong></p>\n<h3 id=\"处理多重条件排序\"><a href=\"#处理多重条件排序\" class=\"headerlink\" title=\"处理多重条件排序\"></a>处理多重条件排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.reback;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> Lunau</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Create</span> 2022-03-20 10:00</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 对set集合及其实现类探究</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Result</span>\t</span><br><span class=\"hljs-comment\">杜甫 2013 21</span><br><span class=\"hljs-comment\">李贺 2014 25</span><br><span class=\"hljs-comment\">李白 2014 20</span><br><span class=\"hljs-comment\">王维 2015 22</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-comment\">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Student&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;Student&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Student s1, Student s2)</span> &#123;<br>                <span class=\"hljs-comment\">//按照id从小到大，age从大到小排序</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num1</span> <span class=\"hljs-operator\">=</span> s1.id-s2.id;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num2</span> <span class=\"hljs-operator\">=</span> num1==<span class=\"hljs-number\">0</span>?s2.age-s1.age:num1;<br>                <span class=\"hljs-keyword\">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-comment\">//添加元素</span><br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;李白&quot;</span>));<br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2013</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-string\">&quot;杜甫&quot;</span>));<br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2015</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-string\">&quot;王维&quot;</span>));<br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-string\">&quot;李贺&quot;</span>));<br>        <span class=\"hljs-keyword\">for</span>(Student s:set) &#123;<br>            System.out.println(s.name+<span class=\"hljs-string\">&quot; &quot;</span>+s.id+<span class=\"hljs-string\">&quot; &quot;</span>+s.age);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>&#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-type\">int</span> age;<br>    String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">int</span> age, String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.id = id;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"two-List\"><a href=\"#two-List\" class=\"headerlink\" title=\":two:List\"></a>:two:List</h2><h3 id=\"2-1-List集合子类特点\"><a href=\"#2-1-List集合子类特点\" class=\"headerlink\" title=\"2.1 List集合子类特点\"></a>2.1 List集合子类特点</h3><p><strong>ArrayList</strong>：底层数据结构是数组，查询快，增删慢</p>\n<p><strong>LinkedList</strong>：底层数据结构是链表，查询慢，增删快</p>\n<h3 id=\"2-2-List集合排序方法\"><a href=\"#2-2-List集合排序方法\" class=\"headerlink\" title=\"2.2 List集合排序方法\"></a>2.2 List集合排序方法</h3><p>以ArrayList实现类为例</p>\n<p>由于比较器排序的过程和Set集合排序的方法相同，但是需要知道的是，<strong>Set集合的排序可以直接在创建Set集合的时候进行比较器排序</strong>（通过创建比较器new Comparator）,而<strong>List列表需要用Collections里的sort方法进行排序</strong>。</p>\n<p><strong>:star:但是排序比较器的构造是一致的，只是排序的方法不一样</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.reback;<br><br><span class=\"hljs-keyword\">import</span> java.util.Collections;<br><span class=\"hljs-keyword\">import</span> java.util.Comparator;<br><span class=\"hljs-keyword\">import</span> java.util.LinkedList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> Lunau</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Create</span> 2022-03-20 12:57</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 关于list排序探究</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Result</span></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutList</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建list集合对象    以LikeList为例</span><br>        List&lt;Student&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();<br><br>          <span class=\"hljs-comment\">//添加元素到集合</span><br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;李白&quot;</span>));<br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2013</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-string\">&quot;杜甫&quot;</span>));<br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2015</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-string\">&quot;王维&quot;</span>));<br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-string\">&quot;李贺&quot;</span>));<br>        <span class=\"hljs-comment\">//采用</span><br>        Collections.sort(list, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Student s1, Student s2)</span> &#123;<br>                <span class=\"hljs-comment\">//按照id从小到大，age从大到小排序</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num1</span> <span class=\"hljs-operator\">=</span> s1.id-s2.id;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num2</span> <span class=\"hljs-operator\">=</span> num1==<span class=\"hljs-number\">0</span>?s2.age-s1.age:num1;<br>                <span class=\"hljs-keyword\">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-comment\">//打印集合</span><br>        <span class=\"hljs-keyword\">for</span>(Student s:list) &#123;<br>            System.out.println(s.name+<span class=\"hljs-string\">&quot; &quot;</span>+s.id+<span class=\"hljs-string\">&quot; &quot;</span>+s.age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"three-容易混淆的\"><a href=\"#three-容易混淆的\" class=\"headerlink\" title=\":three: 容易混淆的\"></a>:three: 容易混淆的</h2><h3 id=\"Collection和Collections的区别\"><a href=\"#Collection和Collections的区别\" class=\"headerlink\" title=\"Collection和Collections的区别\"></a>Collection和Collections的区别</h3><p>Collection：是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供最大化的统一操作方式。</p>\n<p>Collections：是一个包装类。它包含各种有关<a href=\"https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020\">集合</a>操作的<strong>静态多态方法</strong>。此类<strong>不能实例化</strong>，就像一个工具类，服务于Java的Collection框架。</p>\n<p>简单理解：Collection是<strong>定义集合</strong>的，实现集合；Collections是<strong>管理集合</strong>，用来对集合进行<strong>操作</strong>的，比如排序、反转等操作。</p>\n<h3 id=\"Comparator比较器\"><a href=\"#Comparator比较器\" class=\"headerlink\" title=\"Comparator比较器\"></a>Comparator比较器</h3><p>该比较器中提供了许多方法，需要终点记忆的是compara()方法，在自定义排序规则的时候就要用对该方法进行重写，</p>\n<p>重写的规则前面已经探讨过了。</p>\n<h1 id=\"point-right-总结\"><a href=\"#point-right-总结\" class=\"headerlink\" title=\":point_right:总结\"></a>:point_right:总结</h1><p>写这篇总结的起因是在写蓝桥杯真题利用List列表排序时，发现过去学习的知识忘记了好多，之前一直用的Set的比较器排序（comparator）比较多，突然让用列表进行比较器排序，发现和自己想的并不是那么一回事，列表排序的方法和set有些不同，查阅一些其他人的博客，加上自己的一些debug，总结出一点能用的知识。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"star-Java集合的回顾（集合的排序）\"><a href=\"#star-Java集合的回顾（集合的排序）\" class=\"headerlink\" title=\":star:Java集合的回顾（集合的排序）\"></a>:star:Java集合的回顾（集合的排序）</h1><p><img src=\"D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320100249565.png\" alt=\"image-20220320100249565\"></p>\n<h2 id=\"one-Set\"><a href=\"#one-Set\" class=\"headerlink\" title=\":one:Set\"></a>:one:Set</h2><h3 id=\"Set集合特点\"><a href=\"#Set集合特点\" class=\"headerlink\" title=\"Set集合特点\"></a><strong>Set集合特点</strong></h3><ul>\n<li><p>不包含重复元素的集合</p>\n</li>\n<li><p>没有带索引的方法，所以不能使用普通for循环遍历</p>\n</li>\n</ul>\n<h3 id=\"TreeSet\"><a href=\"#TreeSet\" class=\"headerlink\" title=\"TreeSet\"></a>TreeSet</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ul>\n<li><p><strong>元素有序</strong>：这里的有序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体的排序取决于构造方法</p>\n<ul>\n<li><p>TreeSet():根据元素的自然排序进行排序（<strong>数字从小到大</strong>）</p>\n</li>\n<li><p>TrssSet(Comparator comparator):根据指定的比较器进行排序</p>\n</li>\n</ul>\n</li>\n<li><p>包含set集合的特点</p>\n</li>\n</ul>\n<h4 id=\"元素有序且不重复\"><a href=\"#元素有序且不重复\" class=\"headerlink\" title=\"元素有序且不重复\"></a>元素有序且不重复</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-type\">Set</span> <span class=\"hljs-variable\">set</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>();<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">5</span>);<br>        set.add(<span class=\"hljs-number\">3</span>);<br>        <span class=\"hljs-keyword\">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br><br>output:<span class=\"hljs-number\">1</span> <span class=\"hljs-number\">3</span> <span class=\"hljs-number\">5</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"比较器排序\"><a href=\"#比较器排序\" class=\"headerlink\" title=\"比较器排序\"></a>比较器排序</h4><h5 id=\"rocket-从小到大排序-分析比较过程\"><a href=\"#rocket-从小到大排序-分析比较过程\" class=\"headerlink\" title=\":rocket:从小到大排序-分析比较过程\"></a><strong>:rocket:从小到大排序-分析比较过程</strong></h5><p>起始情况下：s1和s2都被赋值为集合添加的第一个值，也就是5    5</p>\n<p>第二次添加：<strong>s1(新元素)</strong>,<strong>s2(已经添加的元素)</strong>,s1-s2&lt;0,s1的位置和s2的位置<strong>不进行交换</strong>    2 5</p>\n<p>第三次添加：s1和第一次添加的元素比较，s1-s2&lt;0,不交换，再和第二次添加的元素比较，s1-s2==0不添加    2 5</p>\n<p>第四次添加：1-5&lt;0 不交换，1-2&lt;0不交换，1 2 5</p>\n<p>(规律)第五次添加：3-5&lt;0 不交换，3-2&gt;0交换（由于已经有序，2大于1,3和2交换，2前面的就不用再比较了），1 2 3 5</p>\n<p>(事实上)：3-2&gt;0放到2的后面，3-5&lt;0放5的前面</p>\n<p>**(按规律)**第六次添加：8-5&gt;0 放5后面，结束    1 2 3  5 8</p>\n<p>**(事实上)**：8-2&gt;0放2后面，8-5&gt;0放5后面    结束    1 2 3 5 8</p>\n<h6 id=\"exclamation-注意\"><a href=\"#exclamation-注意\" class=\"headerlink\" title=\":exclamation:注意\"></a>:exclamation:注意</h6><ul>\n<li><p>上面是模拟运行的过程，这是通过debug分析执行过程的出的过程，但是第五次和第六次添加的时候却出现了和前几次不同的情况，这一点我还在困惑中，不过我感觉<strong>可能和在元素在空间中存放的位置</strong>（地址有关）。至于为什么说是前几次形成的规律，是为了便于自己记忆比较的过程。</p>\n</li>\n<li><p>比较过程的描述用<strong>交换</strong>我觉得可能不太准确，因为在比较的过程中，并不能确定s1添加进去和s2比较的相对位置，所以按照从小到大（从左到右）的描述，我觉得用<strong>放前面放后面</strong>相对准确一些，也就是s1-s2&gt;0放到s2的后面；s1-s2&lt;0就放在s2的前面（s1-s2==0也放前面）<strong>望周知</strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-comment\">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Integer s1, Integer s2)</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> s1-s2;<br>            &#125;<br>        &#125;);<br>        set.add(<span class=\"hljs-number\">5</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">3</span>);<br>        set.add(<span class=\"hljs-number\">8</span>);<br>        <span class=\"hljs-keyword\">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"贴上运行完的截图\"><a href=\"#贴上运行完的截图\" class=\"headerlink\" title=\"贴上运行完的截图\"></a>贴上运行完的截图</h6><p><img src=\"D:\\资源\\学习工作\\lnnau\\typora笔记\\笔记图片\\image-20220320111034431.png\" alt=\"image-20220320111034431\"></p>\n<h5 id=\"robot-从大到小排序\"><a href=\"#robot-从大到小排序\" class=\"headerlink\" title=\":robot:从大到小排序\"></a>:robot:从大到小排序</h5><p>起始：s2和s1都被赋值为第一个被添加的值5    5</p>\n<p>第二次添加：s2(已经添加过的元素)-s1(新元素)&gt;0，2放5的后面    5 2</p>\n<p>第三次添加：5-2&gt;0，放5后面，2-2==0，不添加    5 2</p>\n<p>第四次添加：5-1&gt;0，放5后面，2-1&gt;0放2后面    5 2 1</p>\n<p>第五次添加：2-3&lt;0，放2前面，5-3&gt;0放5后面    5 3 2 1</p>\n<p>第六次添加：2-8&lt;0，放2前面，5-8&lt;0放5前面     8 5 3 2 1</p>\n<p><strong>需要注意的和从小到大类似，不再赘述</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-comment\">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Integer&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Integer s1, Integer s2)</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> s2-s1;<br>            &#125;<br>        &#125;);<br>        set.add(<span class=\"hljs-number\">5</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">2</span>);<br>        set.add(<span class=\"hljs-number\">1</span>);<br>        set.add(<span class=\"hljs-number\">3</span>);<br>        set.add(<span class=\"hljs-number\">8</span>);<br>        <span class=\"hljs-keyword\">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"end-总结\"><a href=\"#end-总结\" class=\"headerlink\" title=\":end:总结\"></a>:end:总结</h4><p>匿名类的方式</p>\n<p>s1:新添加元素    s2:已经添加过的元素</p>\n<p>实现接口的方式</p>\n<p>this. 新添加的元素    s:已经添加的元素</p>\n<h5 id=\"从小到大排序\"><a href=\"#从小到大排序\" class=\"headerlink\" title=\"从小到大排序\"></a>从小到大排序</h5><p>格式：s1-s2</p>\n<blockquote>\n<p>s1-s2=num    num&gt;0    s1放在s2的后面</p>\n<p>​                        num&lt;0    s1放在s2的前面</p>\n<p>​                        num==0    s1不添加</p>\n</blockquote>\n<p>​                    </p>\n<h5 id=\"从大到小排序\"><a href=\"#从大到小排序\" class=\"headerlink\" title=\"从大到小排序\"></a>从大到小排序</h5><blockquote>\n<p>s2-s1=num    num&gt;0    s1放在s2的后面</p>\n<p>​                        num&lt;0    s1放在s2的前面</p>\n<p>​                        num==0    s1不添加</p>\n</blockquote>\n<p><strong>s1在前降序排列，s1在后升序排列</strong></p>\n<h3 id=\"处理多重条件排序\"><a href=\"#处理多重条件排序\" class=\"headerlink\" title=\"处理多重条件排序\"></a>处理多重条件排序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.reback;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> Lunau</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Create</span> 2022-03-20 10:00</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 对set集合及其实现类探究</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Result</span>\t</span><br><span class=\"hljs-comment\">杜甫 2013 21</span><br><span class=\"hljs-comment\">李贺 2014 25</span><br><span class=\"hljs-comment\">李白 2014 20</span><br><span class=\"hljs-comment\">王维 2015 22</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutSet</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建set集合</span><br>        <span class=\"hljs-comment\">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Student&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;Student&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Student s1, Student s2)</span> &#123;<br>                <span class=\"hljs-comment\">//按照id从小到大，age从大到小排序</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num1</span> <span class=\"hljs-operator\">=</span> s1.id-s2.id;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num2</span> <span class=\"hljs-operator\">=</span> num1==<span class=\"hljs-number\">0</span>?s2.age-s1.age:num1;<br>                <span class=\"hljs-keyword\">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-comment\">//添加元素</span><br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;李白&quot;</span>));<br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2013</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-string\">&quot;杜甫&quot;</span>));<br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2015</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-string\">&quot;王维&quot;</span>));<br>        set.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-string\">&quot;李贺&quot;</span>));<br>        <span class=\"hljs-keyword\">for</span>(Student s:set) &#123;<br>            System.out.println(s.name+<span class=\"hljs-string\">&quot; &quot;</span>+s.id+<span class=\"hljs-string\">&quot; &quot;</span>+s.age);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span>&#123;<br>    <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-type\">int</span> age;<br>    String name;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Student</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> id, <span class=\"hljs-type\">int</span> age, String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.id = id;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"two-List\"><a href=\"#two-List\" class=\"headerlink\" title=\":two:List\"></a>:two:List</h2><h3 id=\"2-1-List集合子类特点\"><a href=\"#2-1-List集合子类特点\" class=\"headerlink\" title=\"2.1 List集合子类特点\"></a>2.1 List集合子类特点</h3><p><strong>ArrayList</strong>：底层数据结构是数组，查询快，增删慢</p>\n<p><strong>LinkedList</strong>：底层数据结构是链表，查询慢，增删快</p>\n<h3 id=\"2-2-List集合排序方法\"><a href=\"#2-2-List集合排序方法\" class=\"headerlink\" title=\"2.2 List集合排序方法\"></a>2.2 List集合排序方法</h3><p>以ArrayList实现类为例</p>\n<p>由于比较器排序的过程和Set集合排序的方法相同，但是需要知道的是，<strong>Set集合的排序可以直接在创建Set集合的时候进行比较器排序</strong>（通过创建比较器new Comparator）,而<strong>List列表需要用Collections里的sort方法进行排序</strong>。</p>\n<p><strong>:star:但是排序比较器的构造是一致的，只是排序的方法不一样</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.reback;<br><br><span class=\"hljs-keyword\">import</span> java.util.Collections;<br><span class=\"hljs-keyword\">import</span> java.util.Comparator;<br><span class=\"hljs-keyword\">import</span> java.util.LinkedList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> Lunau</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Create</span> 2022-03-20 12:57</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 关于list排序探究</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Result</span></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AboutList</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//创建list集合对象    以LikeList为例</span><br>        List&lt;Student&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LinkedList</span>&lt;&gt;();<br><br>          <span class=\"hljs-comment\">//添加元素到集合</span><br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;李白&quot;</span>));<br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2013</span>,<span class=\"hljs-number\">21</span>,<span class=\"hljs-string\">&quot;杜甫&quot;</span>));<br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2015</span>,<span class=\"hljs-number\">22</span>,<span class=\"hljs-string\">&quot;王维&quot;</span>));<br>        list.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Student</span>(<span class=\"hljs-number\">2014</span>,<span class=\"hljs-number\">25</span>,<span class=\"hljs-string\">&quot;李贺&quot;</span>));<br>        <span class=\"hljs-comment\">//采用</span><br>        Collections.sort(list, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(Student s1, Student s2)</span> &#123;<br>                <span class=\"hljs-comment\">//按照id从小到大，age从大到小排序</span><br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num1</span> <span class=\"hljs-operator\">=</span> s1.id-s2.id;<br>                <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num2</span> <span class=\"hljs-operator\">=</span> num1==<span class=\"hljs-number\">0</span>?s2.age-s1.age:num1;<br>                <span class=\"hljs-keyword\">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class=\"hljs-comment\">//打印集合</span><br>        <span class=\"hljs-keyword\">for</span>(Student s:list) &#123;<br>            System.out.println(s.name+<span class=\"hljs-string\">&quot; &quot;</span>+s.id+<span class=\"hljs-string\">&quot; &quot;</span>+s.age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"three-容易混淆的\"><a href=\"#three-容易混淆的\" class=\"headerlink\" title=\":three: 容易混淆的\"></a>:three: 容易混淆的</h2><h3 id=\"Collection和Collections的区别\"><a href=\"#Collection和Collections的区别\" class=\"headerlink\" title=\"Collection和Collections的区别\"></a>Collection和Collections的区别</h3><p>Collection：是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供最大化的统一操作方式。</p>\n<p>Collections：是一个包装类。它包含各种有关<a href=\"https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020\">集合</a>操作的<strong>静态多态方法</strong>。此类<strong>不能实例化</strong>，就像一个工具类，服务于Java的Collection框架。</p>\n<p>简单理解：Collection是<strong>定义集合</strong>的，实现集合；Collections是<strong>管理集合</strong>，用来对集合进行<strong>操作</strong>的，比如排序、反转等操作。</p>\n<h3 id=\"Comparator比较器\"><a href=\"#Comparator比较器\" class=\"headerlink\" title=\"Comparator比较器\"></a>Comparator比较器</h3><p>该比较器中提供了许多方法，需要终点记忆的是compara()方法，在自定义排序规则的时候就要用对该方法进行重写，</p>\n<p>重写的规则前面已经探讨过了。</p>\n<h1 id=\"point-right-总结\"><a href=\"#point-right-总结\" class=\"headerlink\" title=\":point_right:总结\"></a>:point_right:总结</h1><p>写这篇总结的起因是在写蓝桥杯真题利用List列表排序时，发现过去学习的知识忘记了好多，之前一直用的Set的比较器排序（comparator）比较多，突然让用列表进行比较器排序，发现和自己想的并不是那么一回事，列表排序的方法和set有些不同，查阅一些其他人的博客，加上自己的一些debug，总结出一点能用的知识。</p>\n"},{"title":"Python爬取某东商品数据","date":"2022-12-02T05:02:04.000Z","_content":"\n## 准备工作\n\n- 运行环境：\n  \n  - Python3.7\n  \n  - selenium3.7.0\n  \n  - chromedriver.exe\n\n- 注意\n  \n  - 使用前下载自己浏览器对应版本的驱动\n  \n  - 将驱动放置在代码同一目录下，非chromedriver驱动请在代码中修改文件名\n\n## 思路\n\n#### 发送访问商品页请求\n\n1. 对[https://www.jd.com](https://www.jd.com)发送访问请求\n\n2. 输入要获取的商品\n\n3. 跳转到搜索页面\n\n#### 读取商品数据并保存\n\n1. 下滑到页面底端（页面商品数据懒加载，需要滑到最后才加载完毕）\n\n2. 使用bs4定位到商品数据的父节点 ul 标签下的所有 li 标签\n\n3. 遍历所有 li 标签，获取每个 li 标签中的商品信息\n\n4. 封装商品信息，追加写入文件\n\n5. 获取到下一页标签，判断该标签是否可以点击\n   \n   - 可点击，点击跳转到下一页，继续执行读取商品数据并保存函数\n   \n   - 不可点击，返回\n\n## 注意\n\n1. 由于个别商品属于自营商品，没有店铺信息，需要对获取到的店铺信息进行异常处理\n\n2. 推荐使用bs4进行元素定位，在selenium中使用bs4定位后的元素可以在该元素基础上再次定位，而xpath不行，使用xpath定位，若出现元素缺失，会出现商品数据错位的情况，而bs4的再次定位可以使得定位到的元素相互独立，即使出现元素缺失，也不会影响其他元素数据。\n\n## 代码\n\n```python\n\"\"\"\n@author:Lunau\n@file:京东商城bs4.py\n@time:2022/12/02\n\"\"\"\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nname = input('请输入商品名称：')\n# 发送请求，获取首页\ndef get_page():\n    chrome_options = webdriver.ChromeOptions()\n    chrome_options.add_experimental_option(\"detach\", True)\n    web = webdriver.Chrome(chrome_options=chrome_options, executable_path='./chromedriver.exe')\n    web.maximize_window()\n    # 商品名、价格、商品链接、评论数量、店铺名称。\n    web.get('https://www.jd.com')\n    # 搜索并跳转\n    input = web.find_element_by_xpath('//*[@id=\"key\"]')\n    input.send_keys(name)\n    input.send_keys(Keys.ENTER)\n    return web\n\n# 获取商品内容并保存\ndef get_content(web,page):\n    time.sleep(3)\n    # 滑动到页面底部，加载一页商品信息\n    location = web.find_element_by_xpath('//div[@class=\"page clearfix\"]')\n    web.execute_script('arguments[0].scrollIntoView();',location)\n\n    time.sleep(2)\n    # 定位商品价格列表\n    goods_list = web.find_elements_by_css_selector(' .gl-warp.clearfix>li')\n\n    print('在第{}页获取到{}个商品'.format(page,len(goods_list)))\n\n    for goods in goods_list:\n        desc = goods.find_element_by_css_selector(' .p-name.p-name-type-2 a').text\n        price = goods.find_element_by_css_selector(' .p-price i').text\n        link = goods.find_element_by_css_selector(' .gl-i-wrap .p-img a').get_attribute('href')\n        commit = goods.find_element_by_css_selector(' .p-commit>strong>a').text\n        # 解决商品没有店铺\n        try:\n            store = goods.find_element_by_css_selector(' .p-shop a').text\n        except:\n            store = 'null'\n        # print('商品描述：{}\\n价格：{}\\n链接：{}\\n评论数量：{}\\n店铺名称：{}\\n'.format(desc,price,link,commit,store))\n        with open(f'./jd_{name}_info.txt','a',encoding='utf-8') as fp:\n            fp.write('商品描述：{}\\n价格：{}\\n链接：{}\\n评论数量：{}\\n店铺名称：{}\\n\\n'.format(desc,price,link,commit,store))\n\n    time.sleep(2)\n    print('第{}页获取到{}个商品下载完毕'.format(page, len(goods_list)))\n\n    # 判断下一页标签是否存在，存在则翻页\n    next = web.find_element_by_css_selector('#J_bottomPage > span.p-num > a.pn-next')\n    judge = next.get_attribute('href')\n    if (judge != None):\n        # 点击下一页\n        next.click()\n        page += 1\n        get_content(web,page)\n    else:\n        return ;\n\nif __name__ == '__main__':\n    page = 1\n    web = get_page()\n    get_content(web,page)![loading-ag-1395](assets/Python——爬取某东商品数据/2022-12-02-12-51-15-image.png)\n```\n\n![](assets/Python爬取某东商品数据/6533eb3b2a4b34ca96afd6f03f4d97c0dafbd2cc.png)\n","source":"_posts/Python爬取某东商品数据.md","raw":"---\ntitle: Python爬取某东商品数据\ndate: 2022-12-02 13:02:04\ntags:\n---\n\n## 准备工作\n\n- 运行环境：\n  \n  - Python3.7\n  \n  - selenium3.7.0\n  \n  - chromedriver.exe\n\n- 注意\n  \n  - 使用前下载自己浏览器对应版本的驱动\n  \n  - 将驱动放置在代码同一目录下，非chromedriver驱动请在代码中修改文件名\n\n## 思路\n\n#### 发送访问商品页请求\n\n1. 对[https://www.jd.com](https://www.jd.com)发送访问请求\n\n2. 输入要获取的商品\n\n3. 跳转到搜索页面\n\n#### 读取商品数据并保存\n\n1. 下滑到页面底端（页面商品数据懒加载，需要滑到最后才加载完毕）\n\n2. 使用bs4定位到商品数据的父节点 ul 标签下的所有 li 标签\n\n3. 遍历所有 li 标签，获取每个 li 标签中的商品信息\n\n4. 封装商品信息，追加写入文件\n\n5. 获取到下一页标签，判断该标签是否可以点击\n   \n   - 可点击，点击跳转到下一页，继续执行读取商品数据并保存函数\n   \n   - 不可点击，返回\n\n## 注意\n\n1. 由于个别商品属于自营商品，没有店铺信息，需要对获取到的店铺信息进行异常处理\n\n2. 推荐使用bs4进行元素定位，在selenium中使用bs4定位后的元素可以在该元素基础上再次定位，而xpath不行，使用xpath定位，若出现元素缺失，会出现商品数据错位的情况，而bs4的再次定位可以使得定位到的元素相互独立，即使出现元素缺失，也不会影响其他元素数据。\n\n## 代码\n\n```python\n\"\"\"\n@author:Lunau\n@file:京东商城bs4.py\n@time:2022/12/02\n\"\"\"\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\nname = input('请输入商品名称：')\n# 发送请求，获取首页\ndef get_page():\n    chrome_options = webdriver.ChromeOptions()\n    chrome_options.add_experimental_option(\"detach\", True)\n    web = webdriver.Chrome(chrome_options=chrome_options, executable_path='./chromedriver.exe')\n    web.maximize_window()\n    # 商品名、价格、商品链接、评论数量、店铺名称。\n    web.get('https://www.jd.com')\n    # 搜索并跳转\n    input = web.find_element_by_xpath('//*[@id=\"key\"]')\n    input.send_keys(name)\n    input.send_keys(Keys.ENTER)\n    return web\n\n# 获取商品内容并保存\ndef get_content(web,page):\n    time.sleep(3)\n    # 滑动到页面底部，加载一页商品信息\n    location = web.find_element_by_xpath('//div[@class=\"page clearfix\"]')\n    web.execute_script('arguments[0].scrollIntoView();',location)\n\n    time.sleep(2)\n    # 定位商品价格列表\n    goods_list = web.find_elements_by_css_selector(' .gl-warp.clearfix>li')\n\n    print('在第{}页获取到{}个商品'.format(page,len(goods_list)))\n\n    for goods in goods_list:\n        desc = goods.find_element_by_css_selector(' .p-name.p-name-type-2 a').text\n        price = goods.find_element_by_css_selector(' .p-price i').text\n        link = goods.find_element_by_css_selector(' .gl-i-wrap .p-img a').get_attribute('href')\n        commit = goods.find_element_by_css_selector(' .p-commit>strong>a').text\n        # 解决商品没有店铺\n        try:\n            store = goods.find_element_by_css_selector(' .p-shop a').text\n        except:\n            store = 'null'\n        # print('商品描述：{}\\n价格：{}\\n链接：{}\\n评论数量：{}\\n店铺名称：{}\\n'.format(desc,price,link,commit,store))\n        with open(f'./jd_{name}_info.txt','a',encoding='utf-8') as fp:\n            fp.write('商品描述：{}\\n价格：{}\\n链接：{}\\n评论数量：{}\\n店铺名称：{}\\n\\n'.format(desc,price,link,commit,store))\n\n    time.sleep(2)\n    print('第{}页获取到{}个商品下载完毕'.format(page, len(goods_list)))\n\n    # 判断下一页标签是否存在，存在则翻页\n    next = web.find_element_by_css_selector('#J_bottomPage > span.p-num > a.pn-next')\n    judge = next.get_attribute('href')\n    if (judge != None):\n        # 点击下一页\n        next.click()\n        page += 1\n        get_content(web,page)\n    else:\n        return ;\n\nif __name__ == '__main__':\n    page = 1\n    web = get_page()\n    get_content(web,page)![loading-ag-1395](assets/Python——爬取某东商品数据/2022-12-02-12-51-15-image.png)\n```\n\n![](assets/Python爬取某东商品数据/6533eb3b2a4b34ca96afd6f03f4d97c0dafbd2cc.png)\n","slug":"Python爬取某东商品数据","published":1,"updated":"2022-12-02T05:04:11.245Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8aw0004mkg7720u7q8z","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p>运行环境：</p>\n<ul>\n<li><p>Python3.7</p>\n</li>\n<li><p>selenium3.7.0</p>\n</li>\n<li><p>chromedriver.exe</p>\n</li>\n</ul>\n</li>\n<li><p>注意</p>\n<ul>\n<li><p>使用前下载自己浏览器对应版本的驱动</p>\n</li>\n<li><p>将驱动放置在代码同一目录下，非chromedriver驱动请在代码中修改文件名</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h4 id=\"发送访问商品页请求\"><a href=\"#发送访问商品页请求\" class=\"headerlink\" title=\"发送访问商品页请求\"></a>发送访问商品页请求</h4><ol>\n<li><p>对<a href=\"https://www.jd.com/\">https://www.jd.com</a>发送访问请求</p>\n</li>\n<li><p>输入要获取的商品</p>\n</li>\n<li><p>跳转到搜索页面</p>\n</li>\n</ol>\n<h4 id=\"读取商品数据并保存\"><a href=\"#读取商品数据并保存\" class=\"headerlink\" title=\"读取商品数据并保存\"></a>读取商品数据并保存</h4><ol>\n<li><p>下滑到页面底端（页面商品数据懒加载，需要滑到最后才加载完毕）</p>\n</li>\n<li><p>使用bs4定位到商品数据的父节点 ul 标签下的所有 li 标签</p>\n</li>\n<li><p>遍历所有 li 标签，获取每个 li 标签中的商品信息</p>\n</li>\n<li><p>封装商品信息，追加写入文件</p>\n</li>\n<li><p>获取到下一页标签，判断该标签是否可以点击</p>\n<ul>\n<li><p>可点击，点击跳转到下一页，继续执行读取商品数据并保存函数</p>\n</li>\n<li><p>不可点击，返回</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><p>由于个别商品属于自营商品，没有店铺信息，需要对获取到的店铺信息进行异常处理</p>\n</li>\n<li><p>推荐使用bs4进行元素定位，在selenium中使用bs4定位后的元素可以在该元素基础上再次定位，而xpath不行，使用xpath定位，若出现元素缺失，会出现商品数据错位的情况，而bs4的再次定位可以使得定位到的元素相互独立，即使出现元素缺失，也不会影响其他元素数据。</p>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">@author:Lunau</span><br><span class=\"hljs-string\">@file:京东商城bs4.py</span><br><span class=\"hljs-string\">@time:2022/12/02</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-keyword\">from</span> selenium <span class=\"hljs-keyword\">import</span> webdriver<br><span class=\"hljs-keyword\">from</span> selenium.webdriver.common.keys <span class=\"hljs-keyword\">import</span> Keys<br><span class=\"hljs-keyword\">import</span> time<br><br>name = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&#x27;请输入商品名称：&#x27;</span>)<br><span class=\"hljs-comment\"># 发送请求，获取首页</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_page</span>():<br>    chrome_options = webdriver.ChromeOptions()<br>    chrome_options.add_experimental_option(<span class=\"hljs-string\">&quot;detach&quot;</span>, <span class=\"hljs-literal\">True</span>)<br>    web = webdriver.Chrome(chrome_options=chrome_options, executable_path=<span class=\"hljs-string\">&#x27;./chromedriver.exe&#x27;</span>)<br>    web.maximize_window()<br>    <span class=\"hljs-comment\"># 商品名、价格、商品链接、评论数量、店铺名称。</span><br>    web.get(<span class=\"hljs-string\">&#x27;https://www.jd.com&#x27;</span>)<br>    <span class=\"hljs-comment\"># 搜索并跳转</span><br>    <span class=\"hljs-built_in\">input</span> = web.find_element_by_xpath(<span class=\"hljs-string\">&#x27;//*[@id=&quot;key&quot;]&#x27;</span>)<br>    <span class=\"hljs-built_in\">input</span>.send_keys(name)<br>    <span class=\"hljs-built_in\">input</span>.send_keys(Keys.ENTER)<br>    <span class=\"hljs-keyword\">return</span> web<br><br><span class=\"hljs-comment\"># 获取商品内容并保存</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_content</span>(<span class=\"hljs-params\">web,page</span>):<br>    time.sleep(<span class=\"hljs-number\">3</span>)<br>    <span class=\"hljs-comment\"># 滑动到页面底部，加载一页商品信息</span><br>    location = web.find_element_by_xpath(<span class=\"hljs-string\">&#x27;//div[@class=&quot;page clearfix&quot;]&#x27;</span>)<br>    web.execute_script(<span class=\"hljs-string\">&#x27;arguments[0].scrollIntoView();&#x27;</span>,location)<br><br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    <span class=\"hljs-comment\"># 定位商品价格列表</span><br>    goods_list = web.find_elements_by_css_selector(<span class=\"hljs-string\">&#x27; .gl-warp.clearfix&gt;li&#x27;</span>)<br><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;在第&#123;&#125;页获取到&#123;&#125;个商品&#x27;</span>.<span class=\"hljs-built_in\">format</span>(page,<span class=\"hljs-built_in\">len</span>(goods_list)))<br><br>    <span class=\"hljs-keyword\">for</span> goods <span class=\"hljs-keyword\">in</span> goods_list:<br>        desc = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-name.p-name-type-2 a&#x27;</span>).text<br>        price = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-price i&#x27;</span>).text<br>        link = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .gl-i-wrap .p-img a&#x27;</span>).get_attribute(<span class=\"hljs-string\">&#x27;href&#x27;</span>)<br>        commit = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-commit&gt;strong&gt;a&#x27;</span>).text<br>        <span class=\"hljs-comment\"># 解决商品没有店铺</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            store = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-shop a&#x27;</span>).text<br>        <span class=\"hljs-keyword\">except</span>:<br>            store = <span class=\"hljs-string\">&#x27;null&#x27;</span><br>        <span class=\"hljs-comment\"># print(&#x27;商品描述：&#123;&#125;\\n价格：&#123;&#125;\\n链接：&#123;&#125;\\n评论数量：&#123;&#125;\\n店铺名称：&#123;&#125;\\n&#x27;.format(desc,price,link,commit,store))</span><br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">f&#x27;./jd_<span class=\"hljs-subst\">&#123;name&#125;</span>_info.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;a&#x27;</span>,encoding=<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">as</span> fp:<br>            fp.write(<span class=\"hljs-string\">&#x27;商品描述：&#123;&#125;\\n价格：&#123;&#125;\\n链接：&#123;&#125;\\n评论数量：&#123;&#125;\\n店铺名称：&#123;&#125;\\n\\n&#x27;</span>.<span class=\"hljs-built_in\">format</span>(desc,price,link,commit,store))<br><br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;第&#123;&#125;页获取到&#123;&#125;个商品下载完毕&#x27;</span>.<span class=\"hljs-built_in\">format</span>(page, <span class=\"hljs-built_in\">len</span>(goods_list)))<br><br>    <span class=\"hljs-comment\"># 判断下一页标签是否存在，存在则翻页</span><br>    <span class=\"hljs-built_in\">next</span> = web.find_element_by_css_selector(<span class=\"hljs-string\">&#x27;#J_bottomPage &gt; span.p-num &gt; a.pn-next&#x27;</span>)<br>    judge = <span class=\"hljs-built_in\">next</span>.get_attribute(<span class=\"hljs-string\">&#x27;href&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> (judge != <span class=\"hljs-literal\">None</span>):<br>        <span class=\"hljs-comment\"># 点击下一页</span><br>        <span class=\"hljs-built_in\">next</span>.click()<br>        page += <span class=\"hljs-number\">1</span><br>        get_content(web,page)<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> ;<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    page = <span class=\"hljs-number\">1</span><br>    web = get_page()<br>    get_content(web,page)![loading-ag-<span class=\"hljs-number\">1395</span>](assets/Python——爬取某东商品数据/<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-02-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">51</span>-<span class=\"hljs-number\">15</span>-image.png)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"assets/Python%E7%88%AC%E5%8F%96%E6%9F%90%E4%B8%9C%E5%95%86%E5%93%81%E6%95%B0%E6%8D%AE/6533eb3b2a4b34ca96afd6f03f4d97c0dafbd2cc.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li><p>运行环境：</p>\n<ul>\n<li><p>Python3.7</p>\n</li>\n<li><p>selenium3.7.0</p>\n</li>\n<li><p>chromedriver.exe</p>\n</li>\n</ul>\n</li>\n<li><p>注意</p>\n<ul>\n<li><p>使用前下载自己浏览器对应版本的驱动</p>\n</li>\n<li><p>将驱动放置在代码同一目录下，非chromedriver驱动请在代码中修改文件名</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><h4 id=\"发送访问商品页请求\"><a href=\"#发送访问商品页请求\" class=\"headerlink\" title=\"发送访问商品页请求\"></a>发送访问商品页请求</h4><ol>\n<li><p>对<a href=\"https://www.jd.com/\">https://www.jd.com</a>发送访问请求</p>\n</li>\n<li><p>输入要获取的商品</p>\n</li>\n<li><p>跳转到搜索页面</p>\n</li>\n</ol>\n<h4 id=\"读取商品数据并保存\"><a href=\"#读取商品数据并保存\" class=\"headerlink\" title=\"读取商品数据并保存\"></a>读取商品数据并保存</h4><ol>\n<li><p>下滑到页面底端（页面商品数据懒加载，需要滑到最后才加载完毕）</p>\n</li>\n<li><p>使用bs4定位到商品数据的父节点 ul 标签下的所有 li 标签</p>\n</li>\n<li><p>遍历所有 li 标签，获取每个 li 标签中的商品信息</p>\n</li>\n<li><p>封装商品信息，追加写入文件</p>\n</li>\n<li><p>获取到下一页标签，判断该标签是否可以点击</p>\n<ul>\n<li><p>可点击，点击跳转到下一页，继续执行读取商品数据并保存函数</p>\n</li>\n<li><p>不可点击，返回</p>\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ol>\n<li><p>由于个别商品属于自营商品，没有店铺信息，需要对获取到的店铺信息进行异常处理</p>\n</li>\n<li><p>推荐使用bs4进行元素定位，在selenium中使用bs4定位后的元素可以在该元素基础上再次定位，而xpath不行，使用xpath定位，若出现元素缺失，会出现商品数据错位的情况，而bs4的再次定位可以使得定位到的元素相互独立，即使出现元素缺失，也不会影响其他元素数据。</p>\n</li>\n</ol>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">@author:Lunau</span><br><span class=\"hljs-string\">@file:京东商城bs4.py</span><br><span class=\"hljs-string\">@time:2022/12/02</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-keyword\">from</span> selenium <span class=\"hljs-keyword\">import</span> webdriver<br><span class=\"hljs-keyword\">from</span> selenium.webdriver.common.keys <span class=\"hljs-keyword\">import</span> Keys<br><span class=\"hljs-keyword\">import</span> time<br><br>name = <span class=\"hljs-built_in\">input</span>(<span class=\"hljs-string\">&#x27;请输入商品名称：&#x27;</span>)<br><span class=\"hljs-comment\"># 发送请求，获取首页</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_page</span>():<br>    chrome_options = webdriver.ChromeOptions()<br>    chrome_options.add_experimental_option(<span class=\"hljs-string\">&quot;detach&quot;</span>, <span class=\"hljs-literal\">True</span>)<br>    web = webdriver.Chrome(chrome_options=chrome_options, executable_path=<span class=\"hljs-string\">&#x27;./chromedriver.exe&#x27;</span>)<br>    web.maximize_window()<br>    <span class=\"hljs-comment\"># 商品名、价格、商品链接、评论数量、店铺名称。</span><br>    web.get(<span class=\"hljs-string\">&#x27;https://www.jd.com&#x27;</span>)<br>    <span class=\"hljs-comment\"># 搜索并跳转</span><br>    <span class=\"hljs-built_in\">input</span> = web.find_element_by_xpath(<span class=\"hljs-string\">&#x27;//*[@id=&quot;key&quot;]&#x27;</span>)<br>    <span class=\"hljs-built_in\">input</span>.send_keys(name)<br>    <span class=\"hljs-built_in\">input</span>.send_keys(Keys.ENTER)<br>    <span class=\"hljs-keyword\">return</span> web<br><br><span class=\"hljs-comment\"># 获取商品内容并保存</span><br><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_content</span>(<span class=\"hljs-params\">web,page</span>):<br>    time.sleep(<span class=\"hljs-number\">3</span>)<br>    <span class=\"hljs-comment\"># 滑动到页面底部，加载一页商品信息</span><br>    location = web.find_element_by_xpath(<span class=\"hljs-string\">&#x27;//div[@class=&quot;page clearfix&quot;]&#x27;</span>)<br>    web.execute_script(<span class=\"hljs-string\">&#x27;arguments[0].scrollIntoView();&#x27;</span>,location)<br><br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    <span class=\"hljs-comment\"># 定位商品价格列表</span><br>    goods_list = web.find_elements_by_css_selector(<span class=\"hljs-string\">&#x27; .gl-warp.clearfix&gt;li&#x27;</span>)<br><br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;在第&#123;&#125;页获取到&#123;&#125;个商品&#x27;</span>.<span class=\"hljs-built_in\">format</span>(page,<span class=\"hljs-built_in\">len</span>(goods_list)))<br><br>    <span class=\"hljs-keyword\">for</span> goods <span class=\"hljs-keyword\">in</span> goods_list:<br>        desc = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-name.p-name-type-2 a&#x27;</span>).text<br>        price = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-price i&#x27;</span>).text<br>        link = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .gl-i-wrap .p-img a&#x27;</span>).get_attribute(<span class=\"hljs-string\">&#x27;href&#x27;</span>)<br>        commit = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-commit&gt;strong&gt;a&#x27;</span>).text<br>        <span class=\"hljs-comment\"># 解决商品没有店铺</span><br>        <span class=\"hljs-keyword\">try</span>:<br>            store = goods.find_element_by_css_selector(<span class=\"hljs-string\">&#x27; .p-shop a&#x27;</span>).text<br>        <span class=\"hljs-keyword\">except</span>:<br>            store = <span class=\"hljs-string\">&#x27;null&#x27;</span><br>        <span class=\"hljs-comment\"># print(&#x27;商品描述：&#123;&#125;\\n价格：&#123;&#125;\\n链接：&#123;&#125;\\n评论数量：&#123;&#125;\\n店铺名称：&#123;&#125;\\n&#x27;.format(desc,price,link,commit,store))</span><br>        <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">f&#x27;./jd_<span class=\"hljs-subst\">&#123;name&#125;</span>_info.txt&#x27;</span>,<span class=\"hljs-string\">&#x27;a&#x27;</span>,encoding=<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>) <span class=\"hljs-keyword\">as</span> fp:<br>            fp.write(<span class=\"hljs-string\">&#x27;商品描述：&#123;&#125;\\n价格：&#123;&#125;\\n链接：&#123;&#125;\\n评论数量：&#123;&#125;\\n店铺名称：&#123;&#125;\\n\\n&#x27;</span>.<span class=\"hljs-built_in\">format</span>(desc,price,link,commit,store))<br><br>    time.sleep(<span class=\"hljs-number\">2</span>)<br>    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;第&#123;&#125;页获取到&#123;&#125;个商品下载完毕&#x27;</span>.<span class=\"hljs-built_in\">format</span>(page, <span class=\"hljs-built_in\">len</span>(goods_list)))<br><br>    <span class=\"hljs-comment\"># 判断下一页标签是否存在，存在则翻页</span><br>    <span class=\"hljs-built_in\">next</span> = web.find_element_by_css_selector(<span class=\"hljs-string\">&#x27;#J_bottomPage &gt; span.p-num &gt; a.pn-next&#x27;</span>)<br>    judge = <span class=\"hljs-built_in\">next</span>.get_attribute(<span class=\"hljs-string\">&#x27;href&#x27;</span>)<br>    <span class=\"hljs-keyword\">if</span> (judge != <span class=\"hljs-literal\">None</span>):<br>        <span class=\"hljs-comment\"># 点击下一页</span><br>        <span class=\"hljs-built_in\">next</span>.click()<br>        page += <span class=\"hljs-number\">1</span><br>        get_content(web,page)<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-keyword\">return</span> ;<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    page = <span class=\"hljs-number\">1</span><br>    web = get_page()<br>    get_content(web,page)![loading-ag-<span class=\"hljs-number\">1395</span>](assets/Python——爬取某东商品数据/<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">12</span>-02-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">51</span>-<span class=\"hljs-number\">15</span>-image.png)<br></code></pre></td></tr></table></figure>\n\n<p><img src=\"assets/Python%E7%88%AC%E5%8F%96%E6%9F%90%E4%B8%9C%E5%95%86%E5%93%81%E6%95%B0%E6%8D%AE/6533eb3b2a4b34ca96afd6f03f4d97c0dafbd2cc.png\"></p>\n"},{"_content":"# :rocket:SpringBoot入门搭建\n\n基于IDEA开发\n\n## 1.创建空项目\n\n![image-20220628162812943](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628162812943.png)\n\n## 2.创建新模块，选择Spring Initializr，并配置模块相关基础信息\n\n默认下载源：https://start.spring.io\n\n默认下载源由于在国外，有时会无法使用，那么可以选择使用国内阿里源：[阿里云知行动手实验室-在浏览器沉浸式学习最新云原生技术 (aliyun.com)](https://start.aliyun.com/)\n\n![image-20220628163105544](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163105544.png)\n\n\n\n## 3.选择当前模块需要使用的技术集\n\nspringboot版本可以在创建后的pom.xml文件中更改\n\n## ![image-20220628163352399](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163352399.png)\n\n\n\n## 4.开发控制器类\n\n测试类\n\n```java\n//Rest模式\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n    @GetMapping\n    public String getById() {\n        System.out.println(\"springboot is running...\");\n        return \"springboot is running...\";\n    }\n}\n```\n\n## 5.测试结果\n\n![image-20220628164123806](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164123806.png)![image-20220628164204027](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164204027.png)","source":"_posts/springboot入门搭建.md","raw":"# :rocket:SpringBoot入门搭建\n\n基于IDEA开发\n\n## 1.创建空项目\n\n![image-20220628162812943](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628162812943.png)\n\n## 2.创建新模块，选择Spring Initializr，并配置模块相关基础信息\n\n默认下载源：https://start.spring.io\n\n默认下载源由于在国外，有时会无法使用，那么可以选择使用国内阿里源：[阿里云知行动手实验室-在浏览器沉浸式学习最新云原生技术 (aliyun.com)](https://start.aliyun.com/)\n\n![image-20220628163105544](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163105544.png)\n\n\n\n## 3.选择当前模块需要使用的技术集\n\nspringboot版本可以在创建后的pom.xml文件中更改\n\n## ![image-20220628163352399](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163352399.png)\n\n\n\n## 4.开发控制器类\n\n测试类\n\n```java\n//Rest模式\n@RestController\n@RequestMapping(\"/books\")\npublic class BookController {\n    @GetMapping\n    public String getById() {\n        System.out.println(\"springboot is running...\");\n        return \"springboot is running...\";\n    }\n}\n```\n\n## 5.测试结果\n\n![image-20220628164123806](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164123806.png)![image-20220628164204027](https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164204027.png)","slug":"springboot入门搭建","published":1,"date":"2022-09-21T03:19:24.008Z","updated":"2022-06-28T08:44:07.157Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8ax0005mkg7dm341pjz","content":"<h1 id=\"rocket-SpringBoot入门搭建\"><a href=\"#rocket-SpringBoot入门搭建\" class=\"headerlink\" title=\":rocket:SpringBoot入门搭建\"></a>:rocket:SpringBoot入门搭建</h1><p>基于IDEA开发</p>\n<h2 id=\"1-创建空项目\"><a href=\"#1-创建空项目\" class=\"headerlink\" title=\"1.创建空项目\"></a>1.创建空项目</h2><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628162812943.png\" alt=\"image-20220628162812943\"></p>\n<h2 id=\"2-创建新模块，选择Spring-Initializr，并配置模块相关基础信息\"><a href=\"#2-创建新模块，选择Spring-Initializr，并配置模块相关基础信息\" class=\"headerlink\" title=\"2.创建新模块，选择Spring Initializr，并配置模块相关基础信息\"></a>2.创建新模块，选择Spring Initializr，并配置模块相关基础信息</h2><p>默认下载源：<a href=\"https://start.spring.io/\">https://start.spring.io</a></p>\n<p>默认下载源由于在国外，有时会无法使用，那么可以选择使用国内阿里源：<a href=\"https://start.aliyun.com/\">阿里云知行动手实验室-在浏览器沉浸式学习最新云原生技术 (aliyun.com)</a></p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163105544.png\" alt=\"image-20220628163105544\"></p>\n<h2 id=\"3-选择当前模块需要使用的技术集\"><a href=\"#3-选择当前模块需要使用的技术集\" class=\"headerlink\" title=\"3.选择当前模块需要使用的技术集\"></a>3.选择当前模块需要使用的技术集</h2><p>springboot版本可以在创建后的pom.xml文件中更改</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163352399.png\" alt=\"image-20220628163352399\"></h2><h2 id=\"4-开发控制器类\"><a href=\"#4-开发控制器类\" class=\"headerlink\" title=\"4.开发控制器类\"></a>4.开发控制器类</h2><p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Rest模式</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/books&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;springboot is running...&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;springboot is running...&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-测试结果\"><a href=\"#5-测试结果\" class=\"headerlink\" title=\"5.测试结果\"></a>5.测试结果</h2><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164123806.png\" alt=\"image-20220628164123806\"><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164204027.png\" alt=\"image-20220628164204027\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"rocket-SpringBoot入门搭建\"><a href=\"#rocket-SpringBoot入门搭建\" class=\"headerlink\" title=\":rocket:SpringBoot入门搭建\"></a>:rocket:SpringBoot入门搭建</h1><p>基于IDEA开发</p>\n<h2 id=\"1-创建空项目\"><a href=\"#1-创建空项目\" class=\"headerlink\" title=\"1.创建空项目\"></a>1.创建空项目</h2><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628162812943.png\" alt=\"image-20220628162812943\"></p>\n<h2 id=\"2-创建新模块，选择Spring-Initializr，并配置模块相关基础信息\"><a href=\"#2-创建新模块，选择Spring-Initializr，并配置模块相关基础信息\" class=\"headerlink\" title=\"2.创建新模块，选择Spring Initializr，并配置模块相关基础信息\"></a>2.创建新模块，选择Spring Initializr，并配置模块相关基础信息</h2><p>默认下载源：<a href=\"https://start.spring.io/\">https://start.spring.io</a></p>\n<p>默认下载源由于在国外，有时会无法使用，那么可以选择使用国内阿里源：<a href=\"https://start.aliyun.com/\">阿里云知行动手实验室-在浏览器沉浸式学习最新云原生技术 (aliyun.com)</a></p>\n<p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163105544.png\" alt=\"image-20220628163105544\"></p>\n<h2 id=\"3-选择当前模块需要使用的技术集\"><a href=\"#3-选择当前模块需要使用的技术集\" class=\"headerlink\" title=\"3.选择当前模块需要使用的技术集\"></a>3.选择当前模块需要使用的技术集</h2><p>springboot版本可以在创建后的pom.xml文件中更改</p>\n<h2 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163352399.png\" alt=\"image-20220628163352399\"></h2><h2 id=\"4-开发控制器类\"><a href=\"#4-开发控制器类\" class=\"headerlink\" title=\"4.开发控制器类\"></a>4.开发控制器类</h2><p>测试类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//Rest模式</span><br><span class=\"hljs-meta\">@RestController</span><br><span class=\"hljs-meta\">@RequestMapping(&quot;/books&quot;)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BookController</span> &#123;<br>    <span class=\"hljs-meta\">@GetMapping</span><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getById</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;springboot is running...&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;springboot is running...&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-测试结果\"><a href=\"#5-测试结果\" class=\"headerlink\" title=\"5.测试结果\"></a>5.测试结果</h2><p><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164123806.png\" alt=\"image-20220628164123806\"><img src=\"https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164204027.png\" alt=\"image-20220628164204027\"></p>\n"},{"_content":"---\n\n---\n\n```yaml\ntitle: test\ndate: 2022-10-08 17:29:26\ntags:\n```\n","source":"_posts/test.md","raw":"---\n\n---\n\n```yaml\ntitle: test\ndate: 2022-10-08 17:29:26\ntags:\n```\n","slug":"test","published":1,"date":"2022-10-08T09:29:26.226Z","updated":"2022-10-08T09:31:10.739Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8ay0006mkg7how6acc5","content":"<hr>\n<hr>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">2022-10-08 17:29:26</span><br><span class=\"hljs-attr\">tags:</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<hr>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">test</span><br><span class=\"hljs-attr\">date:</span> <span class=\"hljs-number\">2022-10-08 17:29:26</span><br><span class=\"hljs-attr\">tags:</span><br></code></pre></td></tr></table></figure>\n"},{"title":"百度翻译API接口调用-Python语言","date":"2022-10-08T09:29:26.000Z","_content":"\n\n\n# 百度翻译API接口调用-Python语言\n\n## :one:申请百度翻译开放平台个人开发者\n\n网页地址：[百度翻译开放平台 (baidu.com)](https://api.fanyi.baidu.com/)\n\n### 1.点击产品服务，选择通用翻译\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-10-04-image.png)\n\n### 2.选择免费体验通用翻译API\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-11-42-image.png)\n\n### 3.填写对应信息申请使用\n\n## :two:使用官方提供demo\n\n### 1.参考开发文档\n\n通用翻译开发者文档：[百度翻译开放平台 (baidu.com)](https://api.fanyi.baidu.com/doc/21)\n\n开发文档有详尽的开发内容，可以通过下载使用demo完成快速开发使用\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-15-56-image.png)\n\n### 2.下载需要用到的demo\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-21-40-image.png)\n\n## :three:完成测试-以Python为例\n\n### 1.填写开发者信息\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-29-20-image.png)\n\n### 2.测试\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-30-47-image.png)\n\n## 注意\n\n其他代码可以自行根据开发文档自行查看。\n","source":"_posts/百度翻译api接口调用.md","raw":"---\n\ntitle: 百度翻译API接口调用-Python语言\ndate: 2022-10-08 17:29:26\ntags:\n\n---\n\n\n\n# 百度翻译API接口调用-Python语言\n\n## :one:申请百度翻译开放平台个人开发者\n\n网页地址：[百度翻译开放平台 (baidu.com)](https://api.fanyi.baidu.com/)\n\n### 1.点击产品服务，选择通用翻译\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-10-04-image.png)\n\n### 2.选择免费体验通用翻译API\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-11-42-image.png)\n\n### 3.填写对应信息申请使用\n\n## :two:使用官方提供demo\n\n### 1.参考开发文档\n\n通用翻译开发者文档：[百度翻译开放平台 (baidu.com)](https://api.fanyi.baidu.com/doc/21)\n\n开发文档有详尽的开发内容，可以通过下载使用demo完成快速开发使用\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-15-56-image.png)\n\n### 2.下载需要用到的demo\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-21-40-image.png)\n\n## :three:完成测试-以Python为例\n\n### 1.填写开发者信息\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-29-20-image.png)\n\n### 2.测试\n\n![](assets/assets百度翻译api接口调用/2022-08-27-16-30-47-image.png)\n\n## 注意\n\n其他代码可以自行根据开发文档自行查看。\n","slug":"百度翻译api接口调用","published":1,"updated":"2022-10-08T09:34:25.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clb61o8az0007mkg7g7v29xi2","content":"<h1 id=\"百度翻译API接口调用-Python语言\"><a href=\"#百度翻译API接口调用-Python语言\" class=\"headerlink\" title=\"百度翻译API接口调用-Python语言\"></a>百度翻译API接口调用-Python语言</h1><h2 id=\"one-申请百度翻译开放平台个人开发者\"><a href=\"#one-申请百度翻译开放平台个人开发者\" class=\"headerlink\" title=\":one:申请百度翻译开放平台个人开发者\"></a>:one:申请百度翻译开放平台个人开发者</h2><p>网页地址：<a href=\"https://api.fanyi.baidu.com/\">百度翻译开放平台 (baidu.com)</a></p>\n<h3 id=\"1-点击产品服务，选择通用翻译\"><a href=\"#1-点击产品服务，选择通用翻译\" class=\"headerlink\" title=\"1.点击产品服务，选择通用翻译\"></a>1.点击产品服务，选择通用翻译</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-10-04-image.png\"></p>\n<h3 id=\"2-选择免费体验通用翻译API\"><a href=\"#2-选择免费体验通用翻译API\" class=\"headerlink\" title=\"2.选择免费体验通用翻译API\"></a>2.选择免费体验通用翻译API</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-11-42-image.png\"></p>\n<h3 id=\"3-填写对应信息申请使用\"><a href=\"#3-填写对应信息申请使用\" class=\"headerlink\" title=\"3.填写对应信息申请使用\"></a>3.填写对应信息申请使用</h3><h2 id=\"two-使用官方提供demo\"><a href=\"#two-使用官方提供demo\" class=\"headerlink\" title=\":two:使用官方提供demo\"></a>:two:使用官方提供demo</h2><h3 id=\"1-参考开发文档\"><a href=\"#1-参考开发文档\" class=\"headerlink\" title=\"1.参考开发文档\"></a>1.参考开发文档</h3><p>通用翻译开发者文档：<a href=\"https://api.fanyi.baidu.com/doc/21\">百度翻译开放平台 (baidu.com)</a></p>\n<p>开发文档有详尽的开发内容，可以通过下载使用demo完成快速开发使用</p>\n<p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-15-56-image.png\"></p>\n<h3 id=\"2-下载需要用到的demo\"><a href=\"#2-下载需要用到的demo\" class=\"headerlink\" title=\"2.下载需要用到的demo\"></a>2.下载需要用到的demo</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-21-40-image.png\"></p>\n<h2 id=\"three-完成测试-以Python为例\"><a href=\"#three-完成测试-以Python为例\" class=\"headerlink\" title=\":three:完成测试-以Python为例\"></a>:three:完成测试-以Python为例</h2><h3 id=\"1-填写开发者信息\"><a href=\"#1-填写开发者信息\" class=\"headerlink\" title=\"1.填写开发者信息\"></a>1.填写开发者信息</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-29-20-image.png\"></p>\n<h3 id=\"2-测试\"><a href=\"#2-测试\" class=\"headerlink\" title=\"2.测试\"></a>2.测试</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-30-47-image.png\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>其他代码可以自行根据开发文档自行查看。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"百度翻译API接口调用-Python语言\"><a href=\"#百度翻译API接口调用-Python语言\" class=\"headerlink\" title=\"百度翻译API接口调用-Python语言\"></a>百度翻译API接口调用-Python语言</h1><h2 id=\"one-申请百度翻译开放平台个人开发者\"><a href=\"#one-申请百度翻译开放平台个人开发者\" class=\"headerlink\" title=\":one:申请百度翻译开放平台个人开发者\"></a>:one:申请百度翻译开放平台个人开发者</h2><p>网页地址：<a href=\"https://api.fanyi.baidu.com/\">百度翻译开放平台 (baidu.com)</a></p>\n<h3 id=\"1-点击产品服务，选择通用翻译\"><a href=\"#1-点击产品服务，选择通用翻译\" class=\"headerlink\" title=\"1.点击产品服务，选择通用翻译\"></a>1.点击产品服务，选择通用翻译</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-10-04-image.png\"></p>\n<h3 id=\"2-选择免费体验通用翻译API\"><a href=\"#2-选择免费体验通用翻译API\" class=\"headerlink\" title=\"2.选择免费体验通用翻译API\"></a>2.选择免费体验通用翻译API</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-11-42-image.png\"></p>\n<h3 id=\"3-填写对应信息申请使用\"><a href=\"#3-填写对应信息申请使用\" class=\"headerlink\" title=\"3.填写对应信息申请使用\"></a>3.填写对应信息申请使用</h3><h2 id=\"two-使用官方提供demo\"><a href=\"#two-使用官方提供demo\" class=\"headerlink\" title=\":two:使用官方提供demo\"></a>:two:使用官方提供demo</h2><h3 id=\"1-参考开发文档\"><a href=\"#1-参考开发文档\" class=\"headerlink\" title=\"1.参考开发文档\"></a>1.参考开发文档</h3><p>通用翻译开发者文档：<a href=\"https://api.fanyi.baidu.com/doc/21\">百度翻译开放平台 (baidu.com)</a></p>\n<p>开发文档有详尽的开发内容，可以通过下载使用demo完成快速开发使用</p>\n<p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-15-56-image.png\"></p>\n<h3 id=\"2-下载需要用到的demo\"><a href=\"#2-下载需要用到的demo\" class=\"headerlink\" title=\"2.下载需要用到的demo\"></a>2.下载需要用到的demo</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-21-40-image.png\"></p>\n<h2 id=\"three-完成测试-以Python为例\"><a href=\"#three-完成测试-以Python为例\" class=\"headerlink\" title=\":three:完成测试-以Python为例\"></a>:three:完成测试-以Python为例</h2><h3 id=\"1-填写开发者信息\"><a href=\"#1-填写开发者信息\" class=\"headerlink\" title=\"1.填写开发者信息\"></a>1.填写开发者信息</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-29-20-image.png\"></p>\n<h3 id=\"2-测试\"><a href=\"#2-测试\" class=\"headerlink\" title=\"2.测试\"></a>2.测试</h3><p><img src=\"assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-30-47-image.png\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>其他代码可以自行根据开发文档自行查看。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Python爬取某东商品数据/2022-12-02-12-51-15-image.png","slug":"2022-12-02-12-51-15-image.png","post":"clb61o8aw0004mkg7720u7q8z","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}