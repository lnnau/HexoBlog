<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/10/08/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/"/>
    <url>/2022/10/08/%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="百度翻译API接口调用-Python语言"><a href="#百度翻译API接口调用-Python语言" class="headerlink" title="百度翻译API接口调用-Python语言"></a>百度翻译API接口调用-Python语言</h1><h2 id="one-申请百度翻译开放平台个人开发者"><a href="#one-申请百度翻译开放平台个人开发者" class="headerlink" title=":one:申请百度翻译开放平台个人开发者"></a>:one:申请百度翻译开放平台个人开发者</h2><p>网页地址：<a href="https://api.fanyi.baidu.com/">百度翻译开放平台 (baidu.com)</a></p><h3 id="1-点击产品服务，选择通用翻译"><a href="#1-点击产品服务，选择通用翻译" class="headerlink" title="1.点击产品服务，选择通用翻译"></a>1.点击产品服务，选择通用翻译</h3><p><img src="assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-10-04-image.png"></p><h3 id="2-选择免费体验通用翻译API"><a href="#2-选择免费体验通用翻译API" class="headerlink" title="2.选择免费体验通用翻译API"></a>2.选择免费体验通用翻译API</h3><p><img src="assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-11-42-image.png"></p><h3 id="3-填写对应信息申请使用"><a href="#3-填写对应信息申请使用" class="headerlink" title="3.填写对应信息申请使用"></a>3.填写对应信息申请使用</h3><h2 id="two-使用官方提供demo"><a href="#two-使用官方提供demo" class="headerlink" title=":two:使用官方提供demo"></a>:two:使用官方提供demo</h2><h3 id="1-参考开发文档"><a href="#1-参考开发文档" class="headerlink" title="1.参考开发文档"></a>1.参考开发文档</h3><p>通用翻译开发者文档：<a href="https://api.fanyi.baidu.com/doc/21">百度翻译开放平台 (baidu.com)</a></p><p>开发文档有详尽的开发内容，可以通过下载使用demo完成快速开发使用</p><p><img src="assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-15-56-image.png"></p><h3 id="2-下载需要用到的demo"><a href="#2-下载需要用到的demo" class="headerlink" title="2.下载需要用到的demo"></a>2.下载需要用到的demo</h3><p><img src="assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-21-40-image.png"></p><h2 id="three-完成测试-以Python为例"><a href="#three-完成测试-以Python为例" class="headerlink" title=":three:完成测试-以Python为例"></a>:three:完成测试-以Python为例</h2><h3 id="1-填写开发者信息"><a href="#1-填写开发者信息" class="headerlink" title="1.填写开发者信息"></a>1.填写开发者信息</h3><p><img src="assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-29-20-image.png"></p><h3 id="2-测试"><a href="#2-测试" class="headerlink" title="2.测试"></a>2.测试</h3><p><img src="assets/assets%E7%99%BE%E5%BA%A6%E7%BF%BB%E8%AF%91api%E6%8E%A5%E5%8F%A3%E8%B0%83%E7%94%A8/2022-08-27-16-30-47-image.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>其他代码可以自行根据开发文档自行查看。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/21/springboot%E5%85%A5%E9%97%A8%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/09/21/springboot%E5%85%A5%E9%97%A8%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="rocket-SpringBoot入门搭建"><a href="#rocket-SpringBoot入门搭建" class="headerlink" title=":rocket:SpringBoot入门搭建"></a>:rocket:SpringBoot入门搭建</h1><p>基于IDEA开发</p><h2 id="1-创建空项目"><a href="#1-创建空项目" class="headerlink" title="1.创建空项目"></a>1.创建空项目</h2><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628162812943.png" alt="image-20220628162812943"></p><h2 id="2-创建新模块，选择Spring-Initializr，并配置模块相关基础信息"><a href="#2-创建新模块，选择Spring-Initializr，并配置模块相关基础信息" class="headerlink" title="2.创建新模块，选择Spring Initializr，并配置模块相关基础信息"></a>2.创建新模块，选择Spring Initializr，并配置模块相关基础信息</h2><p>默认下载源：<a href="https://start.spring.io/">https://start.spring.io</a></p><p>默认下载源由于在国外，有时会无法使用，那么可以选择使用国内阿里源：<a href="https://start.aliyun.com/">阿里云知行动手实验室-在浏览器沉浸式学习最新云原生技术 (aliyun.com)</a></p><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163105544.png" alt="image-20220628163105544"></p><h2 id="3-选择当前模块需要使用的技术集"><a href="#3-选择当前模块需要使用的技术集" class="headerlink" title="3.选择当前模块需要使用的技术集"></a>3.选择当前模块需要使用的技术集</h2><p>springboot版本可以在创建后的pom.xml文件中更改</p><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628163352399.png" alt="image-20220628163352399"></h2><h2 id="4-开发控制器类"><a href="#4-开发控制器类" class="headerlink" title="4.开发控制器类"></a>4.开发控制器类</h2><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Rest模式</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/books&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BookController</span> &#123;<br>    <span class="hljs-meta">@GetMapping</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getById</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;springboot is running...&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;springboot is running...&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-测试结果"><a href="#5-测试结果" class="headerlink" title="5.测试结果"></a>5.测试结果</h2><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164123806.png" alt="image-20220628164123806"><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220628164204027.png" alt="image-20220628164204027"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/21/Java%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/"/>
    <url>/2022/09/21/Java%E5%B8%B8%E8%A7%81%E5%BC%82%E5%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-起因"><a href="#1-起因" class="headerlink" title="1.起因"></a>1.起因</h1><p>在学习瑞吉外卖的时候，老师经常把一些逻辑语句放到controller中，导致我对这些代码是该写到controller还是service中很不清楚，我将那段代码发到了java吧，希望大家能给一点建议，代码中有个在foreach中进行查询数据库id删除的操作，大佬们说不能循环中删除，但我也不明白原因，只好查询资料找到了如下的信息。</p><p><img src="D:\软件\工具\截图工具\自动保存、\Snipaste_2022-08-12_17-32-33.png" alt="Snipaste_2022-08-12_17-32-33"></p><h1 id="2-学习"><a href="#2-学习" class="headerlink" title="2.学习"></a>2.学习</h1><h2 id="学习java基础时"><a href="#学习java基础时" class="headerlink" title="学习java基础时"></a>学习java基础时</h2><p>我翻看了之前学习java基础时的视频，找到了关于foreach的视频，里面粗略的演示了报错的操作（在循环中删除集合元素），虽然没有具体讲原因，但是我是确实没有记住这个异常。</p><h2 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h2><p>我看了一些博主写的资料，也通过debug去看了源代码的执行过程，发现确实会出现异常<strong>ConcurrentModificationException</strong>，</p><p><strong>贴上发生异常的代码。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ListItr</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ListIterator</span>&lt;E&gt; &#123;<br>       <span class="hljs-keyword">private</span> Node&lt;E&gt; lastReturned;<br>       <span class="hljs-keyword">private</span> Node&lt;E&gt; next;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> nextIndex;<br>       <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">expectedModCount</span> <span class="hljs-operator">=</span> modCount;<span class="hljs-comment">// modCount会随着对集合的操作次数而相应增加</span><br><br>    <span class="hljs-comment">// 省略部分代码</span><br>    <br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> &#123;<br>           checkForComodification();<br>           <span class="hljs-keyword">if</span> (lastReturned == <span class="hljs-literal">null</span>)<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br><br>           Node&lt;E&gt; lastNext = lastReturned.next;<br>           unlink(lastReturned);<br>           <span class="hljs-keyword">if</span> (next == lastReturned)<br>               next = lastNext;<br>           <span class="hljs-keyword">else</span><br>               nextIndex--;<br>           lastReturned = <span class="hljs-literal">null</span>;<br>           expectedModCount++;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(E e)</span> &#123;<br>           <span class="hljs-keyword">if</span> (lastReturned == <span class="hljs-literal">null</span>)<br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>();<br>           checkForComodification();<br>           lastReturned.item = e;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span> &#123;<br>           checkForComodification();<br>           lastReturned = <span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">if</span> (next == <span class="hljs-literal">null</span>)<br>               linkLast(e);<br>           <span class="hljs-keyword">else</span><br>               linkBefore(e, next);<br>           nextIndex++;<br>           expectedModCount++;<br>       &#125;<br><br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEachRemaining</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> E&gt; action)</span> &#123;<br>           Objects.requireNonNull(action);<br>           <span class="hljs-keyword">while</span> (modCount == expectedModCount &amp;&amp; nextIndex &lt; size) &#123;<br>               action.accept(next.item);<br>               lastReturned = next;<br>               next = next.next;<br>               nextIndex++;<br>           &#125;<br>           checkForComodification();<br>       &#125;<br><br>       <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkForComodification</span><span class="hljs-params">()</span> &#123;<br>           <span class="hljs-keyword">if</span> (modCount != expectedModCount)<br>               <span class="hljs-comment">// 异常抛出</span><br>               <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentModificationException</span>();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>我们知道 java.util.ArrayList不是线程安全的，因此如果在使用迭代器的过程中有其他线程修改了list，那么将抛出ConcurrentModificationException，这就是所谓fail-fast策略。这一策略在<a href="https://so.csdn.net/so/search?q=%E6%BA%90%E7%A0%81&spm=1001.2101.3001.7020">源码</a>中的实现是通过 modCount 域，modCount 顾名思义就是修改次数，对ArrayList 内容的修改都将增加这个值，那么在迭代器初始化过程中会将这个值赋给迭代器的 expectedModCount。在迭代过程中，<strong>判断 modCount 跟 expectedModCount 是否相等，如果不相等就表示已经有其他线程修改了 list</strong>：注意到 modCount 声明为 volatile，保证线程之间修改的可见性。</p><h2 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h2><p>使用迭代器进行操作时能够确保 <strong>modCount 跟 expectedModCount 相等</strong>，从而不会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> top.plutos;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Lunau</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2022-08-15 10:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 关于foreach的使用</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Result</span></span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">foreach</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        list.add(<span class="hljs-string">&quot;1&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;2&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;3&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;4&quot;</span>);<br><br>        <span class="hljs-comment">//正确方式</span><br>        Iterator&lt;String&gt; iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext()) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;2&quot;</span>.equals(next)) &#123;<br>                iterator.remove();<br>            &#125;<br>        &#125;<br><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//        //错误方式</span><br><span class="hljs-comment">//        for (String s : list) &#123;</span><br><span class="hljs-comment">//            //删除第二个</span><br><span class="hljs-comment">//            if (&quot;2&quot;.equals(s)) &#123;</span><br><span class="hljs-comment">//                list.remove(s);</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;</span><br>        System.out.println(list.toString());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h1><p><a href="https://blog.csdn.net/weixin_40254498/article/details/81386920">Java 集合中常见 checkForComodification()方法的作用? modCount和expectedModCount作用?_Dwxqnswxl的博客-CSDN博客_expectedmodcount</a></p><p><a href="https://blog.csdn.net/xiaoleilei666/article/details/102881314">ArrayList底层jdk源码之modCount、expectedModCount解读_技匠三石弟弟的博客-CSDN博客_expectedmodcount</a></p><p><a href="https://www.cnblogs.com/zhangcaiwang/p/7131035.html">LinkedList之modCount和expectedModCount - 不吃陈皮 - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/penriver/article/details/117743726">JAVA集合为什么不能在foreach 循环中添加或删除元素？_java编程艺术的博客-CSDN博客_foreach不能增加删除</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/21/Java%E9%9B%86%E5%90%88%E7%9A%84%E5%9B%9E%E9%A1%BE%EF%BC%88%E9%9B%86%E5%90%88%E7%9A%84%E6%8E%92%E5%BA%8F%EF%BC%89/"/>
    <url>/2022/09/21/Java%E9%9B%86%E5%90%88%E7%9A%84%E5%9B%9E%E9%A1%BE%EF%BC%88%E9%9B%86%E5%90%88%E7%9A%84%E6%8E%92%E5%BA%8F%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="star-Java集合的回顾（集合的排序）"><a href="#star-Java集合的回顾（集合的排序）" class="headerlink" title=":star:Java集合的回顾（集合的排序）"></a>:star:Java集合的回顾（集合的排序）</h1><p><img src="D:\资源\学习工作\lnnau\typora笔记\笔记图片\image-20220320100249565.png" alt="image-20220320100249565"></p><h2 id="one-Set"><a href="#one-Set" class="headerlink" title=":one:Set"></a>:one:Set</h2><h3 id="Set集合特点"><a href="#Set集合特点" class="headerlink" title="Set集合特点"></a><strong>Set集合特点</strong></h3><ul><li><p>不包含重复元素的集合</p></li><li><p>没有带索引的方法，所以不能使用普通for循环遍历</p></li></ul><h3 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h3><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li><p><strong>元素有序</strong>：这里的有序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体的排序取决于构造方法</p><ul><li><p>TreeSet():根据元素的自然排序进行排序（<strong>数字从小到大</strong>）</p></li><li><p>TrssSet(Comparator comparator):根据指定的比较器进行排序</p></li></ul></li><li><p>包含set集合的特点</p></li></ul><h4 id="元素有序且不重复"><a href="#元素有序且不重复" class="headerlink" title="元素有序且不重复"></a>元素有序且不重复</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AboutSet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建set集合</span><br>        <span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br>        set.add(<span class="hljs-number">1</span>);<br>        set.add(<span class="hljs-number">1</span>);<br>        set.add(<span class="hljs-number">5</span>);<br>        set.add(<span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br><br>output:<span class="hljs-number">1</span> <span class="hljs-number">3</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><h4 id="比较器排序"><a href="#比较器排序" class="headerlink" title="比较器排序"></a>比较器排序</h4><h5 id="rocket-从小到大排序-分析比较过程"><a href="#rocket-从小到大排序-分析比较过程" class="headerlink" title=":rocket:从小到大排序-分析比较过程"></a><strong>:rocket:从小到大排序-分析比较过程</strong></h5><p>起始情况下：s1和s2都被赋值为集合添加的第一个值，也就是5    5</p><p>第二次添加：<strong>s1(新元素)</strong>,<strong>s2(已经添加的元素)</strong>,s1-s2&lt;0,s1的位置和s2的位置<strong>不进行交换</strong>    2 5</p><p>第三次添加：s1和第一次添加的元素比较，s1-s2&lt;0,不交换，再和第二次添加的元素比较，s1-s2==0不添加    2 5</p><p>第四次添加：1-5&lt;0 不交换，1-2&lt;0不交换，1 2 5</p><p>(规律)第五次添加：3-5&lt;0 不交换，3-2&gt;0交换（由于已经有序，2大于1,3和2交换，2前面的就不用再比较了），1 2 3 5</p><p>(事实上)：3-2&gt;0放到2的后面，3-5&lt;0放5的前面</p><p>**(按规律)**第六次添加：8-5&gt;0 放5后面，结束    1 2 3  5 8</p><p>**(事实上)**：8-2&gt;0放2后面，8-5&gt;0放5后面    结束    1 2 3 5 8</p><h6 id="exclamation-注意"><a href="#exclamation-注意" class="headerlink" title=":exclamation:注意"></a>:exclamation:注意</h6><ul><li><p>上面是模拟运行的过程，这是通过debug分析执行过程的出的过程，但是第五次和第六次添加的时候却出现了和前几次不同的情况，这一点我还在困惑中，不过我感觉<strong>可能和在元素在空间中存放的位置</strong>（地址有关）。至于为什么说是前几次形成的规律，是为了便于自己记忆比较的过程。</p></li><li><p>比较过程的描述用<strong>交换</strong>我觉得可能不太准确，因为在比较的过程中，并不能确定s1添加进去和s2比较的相对位置，所以按照从小到大（从左到右）的描述，我觉得用<strong>放前面放后面</strong>相对准确一些，也就是s1-s2&gt;0放到s2的后面；s1-s2&lt;0就放在s2的前面（s1-s2==0也放前面）<strong>望周知</strong>。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AboutSet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建set集合</span><br>        <span class="hljs-comment">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer s1, Integer s2)</span> &#123;<br>                <span class="hljs-keyword">return</span> s1-s2;<br>            &#125;<br>        &#125;);<br>        set.add(<span class="hljs-number">5</span>);<br>        set.add(<span class="hljs-number">2</span>);<br>        set.add(<span class="hljs-number">2</span>);<br>        set.add(<span class="hljs-number">1</span>);<br>        set.add(<span class="hljs-number">3</span>);<br>        set.add(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h6 id="贴上运行完的截图"><a href="#贴上运行完的截图" class="headerlink" title="贴上运行完的截图"></a>贴上运行完的截图</h6><p><img src="D:\资源\学习工作\lnnau\typora笔记\笔记图片\image-20220320111034431.png" alt="image-20220320111034431"></p><h5 id="robot-从大到小排序"><a href="#robot-从大到小排序" class="headerlink" title=":robot:从大到小排序"></a>:robot:从大到小排序</h5><p>起始：s2和s1都被赋值为第一个被添加的值5    5</p><p>第二次添加：s2(已经添加过的元素)-s1(新元素)&gt;0，2放5的后面    5 2</p><p>第三次添加：5-2&gt;0，放5后面，2-2==0，不添加    5 2</p><p>第四次添加：5-1&gt;0，放5后面，2-1&gt;0放2后面    5 2 1</p><p>第五次添加：2-3&lt;0，放2前面，5-3&gt;0放5后面    5 3 2 1</p><p>第六次添加：2-8&lt;0，放2前面，5-8&lt;0放5前面     8 5 3 2 1</p><p><strong>需要注意的和从小到大类似，不再赘述</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AboutSet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建set集合</span><br>        <span class="hljs-comment">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Integer&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer s1, Integer s2)</span> &#123;<br>                <span class="hljs-keyword">return</span> s2-s1;<br>            &#125;<br>        &#125;);<br>        set.add(<span class="hljs-number">5</span>);<br>        set.add(<span class="hljs-number">2</span>);<br>        set.add(<span class="hljs-number">2</span>);<br>        set.add(<span class="hljs-number">1</span>);<br>        set.add(<span class="hljs-number">3</span>);<br>        set.add(<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">for</span>(Object o:set) &#123;<br>            System.out.println(o);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="end-总结"><a href="#end-总结" class="headerlink" title=":end:总结"></a>:end:总结</h4><p>匿名类的方式</p><p>s1:新添加元素    s2:已经添加过的元素</p><p>实现接口的方式</p><p>this. 新添加的元素    s:已经添加的元素</p><h5 id="从小到大排序"><a href="#从小到大排序" class="headerlink" title="从小到大排序"></a>从小到大排序</h5><p>格式：s1-s2</p><blockquote><p>s1-s2=num    num&gt;0    s1放在s2的后面</p><p>​                        num&lt;0    s1放在s2的前面</p><p>​                        num==0    s1不添加</p></blockquote><p>​                    </p><h5 id="从大到小排序"><a href="#从大到小排序" class="headerlink" title="从大到小排序"></a>从大到小排序</h5><blockquote><p>s2-s1=num    num&gt;0    s1放在s2的后面</p><p>​                        num&lt;0    s1放在s2的前面</p><p>​                        num==0    s1不添加</p></blockquote><p><strong>s1在前降序排列，s1在后升序排列</strong></p><h3 id="处理多重条件排序"><a href="#处理多重条件排序" class="headerlink" title="处理多重条件排序"></a>处理多重条件排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.reback;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Lunau</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2022-03-20 10:00</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 对set集合及其实现类探究</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Result</span></span><br><span class="hljs-comment">杜甫 2013 21</span><br><span class="hljs-comment">李贺 2014 25</span><br><span class="hljs-comment">李白 2014 20</span><br><span class="hljs-comment">王维 2015 22</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AboutSet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建set集合</span><br>        <span class="hljs-comment">//通过比较器排序Comparator自定义排序方式</span><br>        Set&lt;Student&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;Student&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student s1, Student s2)</span> &#123;<br>                <span class="hljs-comment">//按照id从小到大，age从大到小排序</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> s1.id-s2.id;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1==<span class="hljs-number">0</span>?s2.age-s1.age:num1;<br>                <span class="hljs-keyword">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//添加元素</span><br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2014</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;李白&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2013</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;杜甫&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2015</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;王维&quot;</span>));<br>        set.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2014</span>,<span class="hljs-number">25</span>,<span class="hljs-string">&quot;李贺&quot;</span>));<br>        <span class="hljs-keyword">for</span>(Student s:set) &#123;<br>            System.out.println(s.name+<span class="hljs-string">&quot; &quot;</span>+s.id+<span class="hljs-string">&quot; &quot;</span>+s.age);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span>&#123;<br>    <span class="hljs-type">int</span> id;<br>    <span class="hljs-type">int</span> age;<br>    String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">int</span> age, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="two-List"><a href="#two-List" class="headerlink" title=":two:List"></a>:two:List</h2><h3 id="2-1-List集合子类特点"><a href="#2-1-List集合子类特点" class="headerlink" title="2.1 List集合子类特点"></a>2.1 List集合子类特点</h3><p><strong>ArrayList</strong>：底层数据结构是数组，查询快，增删慢</p><p><strong>LinkedList</strong>：底层数据结构是链表，查询慢，增删快</p><h3 id="2-2-List集合排序方法"><a href="#2-2-List集合排序方法" class="headerlink" title="2.2 List集合排序方法"></a>2.2 List集合排序方法</h3><p>以ArrayList实现类为例</p><p>由于比较器排序的过程和Set集合排序的方法相同，但是需要知道的是，<strong>Set集合的排序可以直接在创建Set集合的时候进行比较器排序</strong>（通过创建比较器new Comparator）,而<strong>List列表需要用Collections里的sort方法进行排序</strong>。</p><p><strong>:star:但是排序比较器的构造是一致的，只是排序的方法不一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.reback;<br><br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> Lunau</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 2022-03-20 12:57</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 关于list排序探究</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Result</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AboutList</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建list集合对象    以LikeList为例</span><br>        List&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br><br>          <span class="hljs-comment">//添加元素到集合</span><br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2014</span>,<span class="hljs-number">20</span>,<span class="hljs-string">&quot;李白&quot;</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2013</span>,<span class="hljs-number">21</span>,<span class="hljs-string">&quot;杜甫&quot;</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2015</span>,<span class="hljs-number">22</span>,<span class="hljs-string">&quot;王维&quot;</span>));<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2014</span>,<span class="hljs-number">25</span>,<span class="hljs-string">&quot;李贺&quot;</span>));<br>        <span class="hljs-comment">//采用</span><br>        Collections.sort(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Student&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Student s1, Student s2)</span> &#123;<br>                <span class="hljs-comment">//按照id从小到大，age从大到小排序</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> s1.id-s2.id;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1==<span class="hljs-number">0</span>?s2.age-s1.age:num1;<br>                <span class="hljs-keyword">return</span> num2;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-comment">//打印集合</span><br>        <span class="hljs-keyword">for</span>(Student s:list) &#123;<br>            System.out.println(s.name+<span class="hljs-string">&quot; &quot;</span>+s.id+<span class="hljs-string">&quot; &quot;</span>+s.age);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="three-容易混淆的"><a href="#three-容易混淆的" class="headerlink" title=":three: 容易混淆的"></a>:three: 容易混淆的</h2><h3 id="Collection和Collections的区别"><a href="#Collection和Collections的区别" class="headerlink" title="Collection和Collections的区别"></a>Collection和Collections的区别</h3><p>Collection：是一个集合接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口在Java类库中有很多具体的实现。Collection接口的意义是为各种具体的集合提供最大化的统一操作方式。</p><p>Collections：是一个包装类。它包含各种有关<a href="https://so.csdn.net/so/search?q=%E9%9B%86%E5%90%88&spm=1001.2101.3001.7020">集合</a>操作的<strong>静态多态方法</strong>。此类<strong>不能实例化</strong>，就像一个工具类，服务于Java的Collection框架。</p><p>简单理解：Collection是<strong>定义集合</strong>的，实现集合；Collections是<strong>管理集合</strong>，用来对集合进行<strong>操作</strong>的，比如排序、反转等操作。</p><h3 id="Comparator比较器"><a href="#Comparator比较器" class="headerlink" title="Comparator比较器"></a>Comparator比较器</h3><p>该比较器中提供了许多方法，需要终点记忆的是compara()方法，在自定义排序规则的时候就要用对该方法进行重写，</p><p>重写的规则前面已经探讨过了。</p><h1 id="point-right-总结"><a href="#point-right-总结" class="headerlink" title=":point_right:总结"></a>:point_right:总结</h1><p>写这篇总结的起因是在写蓝桥杯真题利用List列表排序时，发现过去学习的知识忘记了好多，之前一直用的Set的比较器排序（comparator）比较多，突然让用列表进行比较器排序，发现和自己想的并不是那么一回事，列表排序的方法和set有些不同，查阅一些其他人的博客，加上自己的一些debug，总结出一点能用的知识。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2022/09/21/Linux%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2022/09/21/Linux%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux基础篇"><a href="#Linux基础篇" class="headerlink" title="Linux基础篇"></a>Linux基础篇</h1><h2 id="1-1-vi、vim快速入门"><a href="#1-1-vi、vim快速入门" class="headerlink" title="1.1 vi、vim快速入门"></a>1.1 vi、vim快速入门</h2><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413100321862.png" alt="image-20220413100321862"></p><h2 id="1-2-vi、vim快捷键"><a href="#1-2-vi、vim快捷键" class="headerlink" title="1.2 vi、vim快捷键"></a>1.2 vi、vim快捷键</h2><p><strong>[ ]中的内容是提示信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝当前行 光标放置哪一行就拷贝当前行yy是复制，p是粘贴yyp就是复制当前行并且粘贴，相当于Ctrl+D</span><br>[一般模式] yyp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝当前行向下的n行</span><br>[一般模式] n yyp<br><span class="hljs-meta prompt_"># </span><span class="language-bash">在文件中查找某个单词</span><br>[命令模式] /关键字+回车 n[查找下一个]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置文件的行号</span><br>[命令模式] :set nu<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消文件的行号</span><br>[命令模式] :set nonu<br><span class="hljs-meta prompt_"># </span><span class="language-bash">快速到达文件顶端或末端</span><br>[一般模式] G[末端]<br>[一般模式] gg[顶端]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">移动光标到某一行n代表移动到第n行</span><br>[一般模式] n+shift键+g<br><span class="hljs-meta prompt_"># </span><span class="language-bash">撤销动作</span><br>[一般模式] u<br></code></pre></td></tr></table></figure><h2 id="2-开机、重启和用户登录注销"><a href="#2-开机、重启和用户登录注销" class="headerlink" title="2. 开机、重启和用户登录注销"></a>2. 开机、重启和用户登录注销</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">立刻进行关机</span><br>shutdown -h now<br><span class="hljs-meta prompt_"># </span><span class="language-bash">1分钟后关机加提示信息，可以提醒到每个登录该终端的用户</span><br>shutdown -h 1<br><span class="hljs-meta prompt_"># </span><span class="language-bash">现在重启计算机</span><br>shutdown -r now<br><span class="hljs-meta prompt_"># </span><span class="language-bash">关机</span><br>halt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">现在重启计算机</span><br>reboot<br><span class="hljs-meta prompt_"># </span><span class="language-bash">把内存中数据同步到磁盘</span><br>sync<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>不管重启系统还是关闭系统，首先要运行sync命令，把内存中的数据写到磁盘中</li><li>目前的shutdown、reboot、halt等命令均已经在关机前进行了sync，但是不确保所有都有，所以建议执行这些命令前先执行sync</li></ol><h3 id="2-1-登录注销"><a href="#2-1-登录注销" class="headerlink" title="2.1 登录注销"></a>2.1 登录注销</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换用户</span><br>su 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注销用户 在提示符下有效</span><br>logout<br></code></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li>logout在图形运行级别无效，在运行级别3下有效</li></ol><h2 id="3-用户管理"><a href="#3-用户管理" class="headerlink" title="3. 用户管理"></a>3. 用户管理</h2><h3 id="3-1-添加、删除和查看用户"><a href="#3-1-添加、删除和查看用户" class="headerlink" title="3.1 添加、删除和查看用户"></a>3.1 添加、删除和查看用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">添加用户 添加用户后会产生一个和用户名同名的家目录</span><br>useradd 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">添加用户 给新用户指定家目录</span><br>useradd -d 目录 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改密码</span><br>passwd 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除用户 保留家目录</span><br>userdel 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除用户和家目录</span><br>userdel -r 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看指定用户信息</span><br>id 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看当前用户/登录用户</span><br>who am i 或者 whoami 或者 who<br></code></pre></td></tr></table></figure><p> <strong>一般情况建议保留家目录</strong> </p><h3 id="3-2-用户组"><a href="#3-2-用户组" class="headerlink" title="3.2 用户组"></a>3.2 用户组</h3><p>介绍：类似于角色，系统可以对有共性/权限的多个用户进行同一管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">创建用户组</span><br>groupadd 组名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">删除用户组</span><br>groupdel 组名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建用户并指定到用户组</span><br>useradd -g 组名 用户名<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改用户的组</span><br>usermod -g 组名 用户名<br></code></pre></td></tr></table></figure><h3 id="3-3-切换用户"><a href="#3-3-切换用户" class="headerlink" title="3.3 切换用户"></a>3.3 切换用户</h3><p>介绍：在操作Linux中，如果当前用户的权限不够，可以通过切换到更高权限的用户来执行操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">切换用户</span><br>su 用户名 或者 su - 用户名<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>从权限高的用户切到权限低的用户的时候不需要输入密码，反之亦然</li><li>当需要返回到原来的用户时，需要输入exit/logout</li></ol><h3 id="3-4-用户组和相关文件"><a href="#3-4-用户组和相关文件" class="headerlink" title="3.4 用户组和相关文件"></a>3.4 用户组和相关文件</h3><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220413215641130.png" alt="image-20220413215641130"></p><h2 id="4-文件目录类"><a href="#4-文件目录类" class="headerlink" title="4.文件目录类"></a>4.文件目录类</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>基本语法：pwd（功能描述：显示当前工作目录的绝对路径）</p><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><p>基本语法：ls 【选项】【文件或者目录】</p><p>常用选项</p><p>-a 显示当前目录的所有文件和目录，包括隐藏</p><p>-l 以列表的方式显示信息</p><h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>基本语法：cd 【参数】（功能描述：切换到指定目录）</p><p>理解：绝对路径和相对路径</p><p>cd或者cd ~ ：回到自己的家目录</p><p>cd .. 回到当前目录的上一级目录</p><p>案例</p><ol><li>使用绝对路径切换到root目录    cd /root</li><li>使用相对路径到/root目录     cd ../../roor</li><li>回到家目录和上一级目录 cd ~ cd ..</li></ol><h4 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h4><p>基本语法：mkdir 【选项】【要创建的目录】（用于创建目录）</p><p>常用选项：-p（创建多级目录）</p><p>案例</p><ol><li>创建一个目录 /home/dog    mkdir /home/dog</li><li>创建多级目录 /home/animal/tiger  mkdir -p /home/animal/tiger</li></ol><h4 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h4><p>基本语法：rmdir 【选项】【要删除的空目录】（用于删除空目录）</p><p>案例</p><p>删除一个目录 /home/dog     rmdir /home/dog</p><p>细节</p><p>rmdir删除的是空目录，如果目录下有内容时无法删除，但是可以通过 rm -rf 强制删除</p><h4 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h4><p>基本语法：touch 【文件名称】（用于创建空文件）</p><p>案例：创建一个空文件 hello.txt       touch hello.txt</p><h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p>基本语法：cp 【选项】source dest （用于拷贝文件到指定目录）</p><p>常用选项</p><p>-r 递归复制整个文件夹</p><p>案例</p><ol><li>将home/hello.txt 拷贝到home/bbb目录下</li><li>递归复制整个文件夹，将/home/bbb整个目录，拷贝到/opt</li></ol><p>强制覆盖不提示的方法 /cp</p><h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p>mv移动文件或目录或重命名</p><p>基本语法</p><p>mv oldNameFile newNameFile (<strong>在同一目录下是重命名</strong>)</p><p>mv /temp/moveFile /targect    (<strong>不同目录下是移动</strong>)</p><p>案例</p><ol><li>将/home 下的cat.txt重命名为pig.txt    mv cat.txt pig.txt</li><li>将/home下的pig.txt移动到/root     mv pig.txt ../root</li><li>移动整个目录，将sunjunhao移动到/home下 mv sunjunhao ../home</li></ol><h4 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h4><p>查看文件内容</p><p>基本语法：cat 【选项】要查看的内容</p><p>常用选项：-n显示行号</p><p>案例：查看/etc/profile 文件内容并显示行号 cat -n /etc/profile</p><p>细节：cat只能浏览文件，不能修改文件内容，为了浏览方便，一般带上管道命令|more</p><p>cat -n /etc/profile | more </p><h4 id="more"><a href="#more" class="headerlink" title="more"></a>more</h4><p>more指令是基于vi编辑器的文本过滤器，它以全屏幕的方式按页显示文件内容，more指令中内置若干快捷键</p><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083303584.png" alt="image-20220420083303584"></p><p>案例：采用more查看文件    more /etc/profile</p><h4 id="less"><a href="#less" class="headerlink" title="less"></a>less</h4><p>less在显示文件是根据浏览时加载，不是一次加载完毕，对于浏览大文件很有效</p><p>基本语法：less 要查看的文件</p><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420083800298.png" alt="image-20220420083800298"></p><h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><p>echo 输出内容到控制台</p><p>基本语法：echo 【选项】要输出的内容</p><p>案例：</p><p>使用echo输出环境变量，$PATH $HOSTNAME</p><p>使用echo 输出hello world</p><h4 id="head"><a href="#head" class="headerlink" title="head"></a>head</h4><p>显示文件内容的开头部分内容</p><p>基本语法</p><p>head 文件（查看前十行内容）</p><p>head -n 5 文件（查看前五行内容 ，5可修改）</p><p>案例：查看/etc/profile前五行内容 head  -n 5 /etc/profile</p><h4 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h4><p>用于输出文件尾部中的内容，默认情况tail显示后十行内容</p><p>基本语法：tail 文件</p><p>tail -n 5 文件</p><p>tail -f 文件 （实时追踪该文档的所有更新）</p><p>案例：</p><p>查看/etc/profile最后五行    tail -n 5 /etc/profile</p><p>实时监控 mydate.txt     tail -f /home/mydate.txt</p><h4 id="gt-gt-gt"><a href="#gt-gt-gt" class="headerlink" title="&gt; &gt;&gt;"></a>&gt; &gt;&gt;</h4><p>“&gt;”输出重定向和”&gt;&gt;”追加</p><p>基本语法</p><ol><li>ls -l &gt;文件 （将列表的内容写入a.txt（覆盖写））</li><li>ls -a &gt;&gt;文件 （列表的内容追加到文件aa.txt末尾）</li><li>cat 文件1 &gt; 文件2（将文件1的内容覆盖到文件2）</li><li>echo 内容&gt;&gt;文件 （追加）</li></ol><p>案例</p><p>将/home 目录下的文件列表写入到/home/info.txt中，覆盖写入    在home目录下 ls -l &gt; info.txt</p><p>将当前日历信息追加到/home/mycal    cal &gt; mycal</p><h4 id="ln"><a href="#ln" class="headerlink" title="ln"></a>ln</h4><p>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径</p><p>基本语法：ln -s【原文件或目录】【软链接名】（给原文件创建一个软链接）</p><p>案例</p><ol><li>在/home 目录下创建一个软链接myroot 链接到/root目录     ln -s /root /home/myroot</li><li>删除软链接 myroot    rm /home/myroot</li></ol><p>细节</p><p>当使用pwd查看目录是，仍然看到的是软链接所在目录</p><h4 id="history"><a href="#history" class="headerlink" title="history"></a>history</h4><p>查看已经执行过的历史命令，也可以执行历史命令</p><p>基本语法：history</p><p>案例</p><p>显示所有历史命令 history</p><p>显示最近的10个指令 history 10</p><p>执行编号为5的指令      !5</p><h2 id="5-时间日期类"><a href="#5-时间日期类" class="headerlink" title="5.时间日期类"></a>5.时间日期类</h2><h3 id="1-date显示当前日期"><a href="#1-date显示当前日期" class="headerlink" title="1.date显示当前日期"></a>1.date显示当前日期</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前时间</span><br>date<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前年份</span><br>date +%Y<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前月份</span><br>date +%m<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前是哪一天</span><br>date +%d<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示年月日时分秒</span><br>date +%Y-%d%H:%M:%S<br></code></pre></td></tr></table></figure><p>案例    记得加上双引号</p><p>显示当前时间信息 date</p><p>显示当前时间年月日</p><p>date “+%Y-%m-%d”</p><h3 id="2-date设置日期"><a href="#2-date设置日期" class="headerlink" title="2.date设置日期"></a>2.date设置日期</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">date -s 字符串时间<br><span class="hljs-meta prompt_"># </span><span class="language-bash">案例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置系统当前时间</span><br>date -s &quot;2022-4-20 10:00:00&quot;<br></code></pre></td></tr></table></figure><h3 id="3-cal指令"><a href="#3-cal指令" class="headerlink" title="3.cal指令"></a>3.cal指令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看日历指令</span><br>cal<br><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法</span><br>cal 【选项】<br><span class="hljs-meta prompt_"># </span><span class="language-bash">案例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示当前日历 cal</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示2022年日历 cal 2022</span><br></code></pre></td></tr></table></figure><h2 id="6-搜索查找类"><a href="#6-搜索查找类" class="headerlink" title="6.搜索查找类"></a>6.搜索查找类</h2><h3 id="1-find指令"><a href="#1-find指令" class="headerlink" title="1.find指令"></a>1.find指令</h3><p>find指令从指定目录向下递归地遍历其各个子目录，将满足条件的文件或目录显示在终端</p><p><img src="https://imgs-bed-lnnau.oss-cn-hangzhou.aliyuncs.com/lnnau/image-20220420095550428.png" alt="image-20220420095550428"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">基本语法</span><br>find 【搜索范围】【选项】<br><span class="hljs-meta prompt_"># </span><span class="language-bash">案例</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">按文件名，根据名称查找/home目录下的hello.txt文件</span><br>find /home -name hello.txt<br><span class="hljs-meta prompt_"># </span><span class="language-bash">按拥有者，查找/opt目录下。用户名为noboby的文件</span><br>find /opt -user nobby<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查找整个Linux系统下大于200M的文件（+n大于 -n小于 n等于，单位k，M，G）</span><br>find / -size +200M<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
